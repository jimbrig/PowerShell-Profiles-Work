<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-PSReadLineKeyHandler</command:name>
      <command:verb>Get</command:verb>
      <command:noun>PSReadLineKeyHandler</command:noun>
      <maml:description>
        <maml:para>Gets the key bindings for the PSReadLine module.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>If no parameter is specified, returns the currently bound key functions for the PSReadLine module.</maml:para>
      <maml:para>If Chord parameter is specified, the cmdlet returns the specific bound keys.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-PSReadLineKeyHandler</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Bound</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns functions that are bound.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>True</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Unbound</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet returns functions that are unbound.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-PSReadLineKeyHandler</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
          <maml:name>Chord</maml:name>
          <maml:description>
            <maml:para>Return only functions bound to specific keys or sequences.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Bound</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns functions that are bound.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>True</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
        <maml:name>Chord</maml:name>
        <maml:description>
          <maml:para>Return only functions bound to specific keys or sequences.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Unbound</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet returns functions that are unbound.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.KeyHandler</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------------- Example 1: Get all key mappings ---------------</maml:title>
        <dev:code>Get-PSReadLineKeyHandler -Bound -Unbound

Key                   Function                Description
---                   --------                -----------
Enter                 AcceptLine              Accept the input or move to the next line if input is missing a closing token.
Shift+Enter           AddLine                 Move the cursor to the next line without attempting to execute the input
Escape                RevertLine              Equivalent to undo all edits (clears the line except lines imported from history)
LeftArrow             BackwardChar            Move the cursor back one character
RightArrow            ForwardChar             Move the cursor forward one character
Ctrl+LeftArrow        BackwardWord            Move the cursor to the beginning of the current or previous word
Ctrl+RightArrow       NextWord                Move the cursor forward to the start of the next word
Shift+LeftArrow       SelectBackwardChar      Adjust the current selection to include the previous character
Shift+RightArrow      SelectForwardChar       Adjust the current selection to include the next character
Ctrl+Shift+LeftArrow  SelectBackwardWord      Adjust the current selection to include the previous word
Ctrl+Shift+RightArrow SelectNextWord          Adjust the current selection to include the next word
UpArrow               PreviousHistory         Replace the input with the previous item in the history
DownArrow             NextHistory             Replace the input with the next item in the history
Home                  BeginningOfLine         Move the cursor to the beginning of the line
End                   EndOfLine               Move the cursor to the end of the line
Shift+Home            SelectBackwardsLine     Adjust the current selection to include from the cursor to the end of the line
Shift+End             SelectLine              Adjust the current selection to include from the cursor to the start of the line
Delete                DeleteChar              Delete the character under the cursor
Backspace             BackwardDeleteChar      Delete the character before the cursor
Ctrl+Spacebar         MenuComplete            Complete the input if there is a single completion, otherwise complete the input by selecting from a menu o...
Tab                   TabCompleteNext         Complete the input using the next completion
Shift+Tab             TabCompletePrevious     Complete the input using the previous completion
Ctrl+a                SelectAll               Select the entire line. Moves the cursor to the end of the line
Ctrl+c                CopyOrCancelLine        Either copy selected text to the clipboard, or if no text is selected, cancel editing the line with Cancel...
Ctrl+C                Copy                    Copy selected region to the system clipboard.  If no region is selected, copy the whole line
Ctrl+l                ClearScreen             Clear the screen and redraw the current line at the top of the screen
Ctrl+r                ReverseSearchHistory    Search history backwards interactively
...</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------------ Example 2: Get bound keys ------------------</maml:title>
        <dev:code>Get-PSReadLineKeyHandler

Key                   Function                Description
---                   --------                -----------
Enter                 AcceptLine              Accept the input or move to the next line if input is missing a closing token.
Shift+Enter           AddLine                 Move the cursor to the next line without attempting to execute the input
Escape                RevertLine              Equivalent to undo all edits (clears the line except lines imported from history)
LeftArrow             BackwardChar            Move the cursor back one character
RightArrow            ForwardChar             Move the cursor forward one character
Ctrl+LeftArrow        BackwardWord            Move the cursor to the beginning of the current or previous word
Ctrl+RightArrow       NextWord                Move the cursor forward to the start of the next word
Shift+LeftArrow       SelectBackwardChar      Adjust the current selection to include the previous character
Shift+RightArrow      SelectForwardChar       Adjust the current selection to include the next character
Ctrl+Shift+LeftArrow  SelectBackwardWord      Adjust the current selection to include the previous word
Ctrl+Shift+RightArrow SelectNextWord          Adjust the current selection to include the next word
UpArrow               PreviousHistory         Replace the input with the previous item in the history
DownArrow             NextHistory             Replace the input with the next item in the history
Home                  BeginningOfLine         Move the cursor to the beginning of the line
End                   EndOfLine               Move the cursor to the end of the line
Shift+Home            SelectBackwardsLine     Adjust the current selection to include from the cursor to the end of the line
Shift+End             SelectLine              Adjust the current selection to include from the cursor to the start of the line
Delete                DeleteChar              Delete the character under the cursor
Backspace             BackwardDeleteChar      Delete the character before the cursor
Ctrl+Spacebar         MenuComplete            Complete the input if there is a single completion, otherwise complete the input by selecting from a menu o...
Tab                   TabCompleteNext         Complete the input using the next completion
...</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 3: Get specific key bindings -------------</maml:title>
        <dev:code>Get-PSReadLineKeyHandler -Chord Enter, Shift+Enter

Key         Function   Description
---         --------   -----------
Enter       AcceptLine Accept the input or move to the next line if input is missing a closing token.
Shift+Enter AddLine    Move the cursor to the next line without attempting to execute the input
...</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/psreadline/get-psreadlinekeyhandler?view=powershell-7.1&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-PSReadLineOption</command:name>
      <command:verb>Get</command:verb>
      <command:noun>PSReadLineOption</command:noun>
      <maml:description>
        <maml:para>Gets values for the options that can be configured.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The `Get-PSReadLineOption` cmdlet returns the current state of the settings that can be configured by using the `Set-PSReadLineOption` cmdlet. You can use the returned object to change PSReadLine options. This provides a slightly simpler way to set syntax coloring options for multiple kinds of tokens.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-PSReadLineOption</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.PSConsoleReadLineOptions</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>An instance of the current options. Changing the property values of this object updates the settings in PSReadLine directly without invoking `Set-PSReadLineOption`.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>----------- Example 1: Get options and their values -----------</maml:title>
        <dev:code>Get-PSReadLineOption

EditMode                               : Windows
AddToHistoryHandler                    : System.Func`2[System.String,System.Object]
HistoryNoDuplicates                    : True
HistorySavePath                        : C:\Users\username\AppData\Roaming\Microsoft\Windows\
                                         PowerShell\PSReadLine\ConsoleHost_history.txt
HistorySaveStyle                       : SaveIncrementally
HistorySearchCaseSensitive             : False
HistorySearchCursorMovesToEnd          : False
MaximumHistoryCount                    : 4096
ContinuationPrompt                     : &gt;&gt;
ExtraPromptLineCount                   : 0
PromptText                             : {&gt; }
BellStyle                              : Audible
DingDuration                           : 50
DingTone                               : 1221
CommandsToValidateScriptBlockArguments : {ForEach-Object, %, Invoke-Command, icm...}
CommandValidationHandler               :
CompletionQueryItems                   : 100
MaximumKillRingCount                   : 10
ShowToolTips                           : True
ViModeIndicator                        : None
WordDelimiters                         : ;:,.[]{}()/\|^&amp;*-=+'"---
AnsiEscapeTimeout                      : 100
CommandColor                           : "`e[93m"
CommentColor                           : "`e[32m"
ContinuationPromptColor                : "`e[97m"
DefaultTokenColor                      : "`e[97m"
EmphasisColor                          : "`e[96m"
ErrorColor                             : "`e[91m"
KeywordColor                           : "`e[92m"
MemberColor                            : "`e[97m"
NumberColor                            : "`e[97m"
OperatorColor                          : "`e[90m"
ParameterColor                         : "`e[90m"
SelectionColor                         : "`e[30;107m"
StringColor                            : "`e[36m"
TypeColor                              : "`e[37m"
VariableColor                          : "`e[92m"</dev:code>
        <dev:remarks>
          <maml:para>This command returns the list of available PSReadLine options and their current values.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/psreadline/get-psreadlineoption?view=powershell-7.1&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-PSReadLineKeyHandler</command:name>
      <command:verb>Remove</command:verb>
      <command:noun>PSReadLineKeyHandler</command:noun>
      <maml:description>
        <maml:para>Removes a key binding.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The `Remove-PSReadLineKeyHandler` cmdlet removes a specified key binding.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-PSReadLineKeyHandler</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
          <maml:name>Chord</maml:name>
          <maml:description>
            <maml:para>Specifies an array of keys or sequences of keys to be removed. A single binding is specified by using a single string. If the binding is a sequence of keys, separate the keys by a comma, as in the following example:</maml:para>
            <maml:para>`Ctrl+x,Ctrl+l`</maml:para>
            <maml:para>This parameter accepts an array of strings. Each string is a separate binding, not a sequence of keys for a single binding.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ViMode</maml:name>
          <maml:description>
            <maml:para>Specify which vi mode the binding applies to. Possible values are: Insert, Command.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Insert</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Command</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.ViMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
        <maml:name>Chord</maml:name>
        <maml:description>
          <maml:para>Specifies an array of keys or sequences of keys to be removed. A single binding is specified by using a single string. If the binding is a sequence of keys, separate the keys by a comma, as in the following example:</maml:para>
          <maml:para>`Ctrl+x,Ctrl+l`</maml:para>
          <maml:para>This parameter accepts an array of strings. Each string is a separate binding, not a sequence of keys for a single binding.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ViMode</maml:name>
        <maml:description>
          <maml:para>Specify which vi mode the binding applies to. Possible values are: Insert, Command.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.ViMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>----------------- Example 1: Remove a binding -----------------</maml:title>
        <dev:code>Remove-PSReadLineKeyHandler -Chord Ctrl+B</dev:code>
        <dev:remarks>
          <maml:para>This command removes the binding from the key combination, or chord, `Ctrl+B`. The `Ctrl+B` chord is created in the `Set-PSReadLineKeyHandler` article.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/psreadline/remove-psreadlinekeyhandler?view=powershell-7.1&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-PSReadLineKeyHandler</command:name>
      <command:verb>Set</command:verb>
      <command:noun>PSReadLineKeyHandler</command:noun>
      <maml:description>
        <maml:para>Binds keys to user-defined or PSReadLine key handler functions.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The `Set-PSReadLineKeyHandler` cmdlet customizes the result when a key or sequence of keys is pressed. With user-defined key bindings, you can do almost anything that is possible from within a PowerShell script.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-PSReadLineKeyHandler</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
          <maml:name>Chord</maml:name>
          <maml:description>
            <maml:para>The key or sequence of keys to be bound to a function or script block. Use a single string to specify a single binding. If the binding is a sequence of keys, separate the keys by a comma, as in the following example:</maml:para>
            <maml:para>`Ctrl+X,Ctrl+L`</maml:para>
            <maml:para>&gt; [!NOTE] &gt; As of PSReadLine 2.0.0, the Chord parameter is case-sensitive . Meaning, &gt; &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; create different bindings.</maml:para>
            <maml:para>This parameter accepts an array of strings. Each string is a separate binding, not a sequence of keys for a single binding.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>ScriptBlock</maml:name>
          <maml:description>
            <maml:para>Specifies a script block value to run when the chord is entered. PSReadLine passes one or two parameters to this script block. The first parameter is a ConsoleKeyInfo object representing the key pressed. The second argument can be any object depending on the context.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.ScriptBlock</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.ScriptBlock</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>BriefDescription</maml:name>
          <maml:description>
            <maml:para>A brief description of the key binding. This description is displayed by the `Get-PSReadLineKeyHandler` cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="LongDescription">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies a more detailed description of the key binding that is visible in the output of the `Get-PSReadLineKeyHandler` cmdlet.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ViMode</maml:name>
          <maml:description>
            <maml:para>Specify which vi mode the binding applies to.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `Insert`</maml:para>
            <maml:para>- `Command`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.ViMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-PSReadLineKeyHandler</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
          <maml:name>Chord</maml:name>
          <maml:description>
            <maml:para>The key or sequence of keys to be bound to a function or script block. Use a single string to specify a single binding. If the binding is a sequence of keys, separate the keys by a comma, as in the following example:</maml:para>
            <maml:para>`Ctrl+X,Ctrl+L`</maml:para>
            <maml:para>&gt; [!NOTE] &gt; As of PSReadLine 2.0.0, the Chord parameter is case-sensitive . Meaning, &gt; &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; create different bindings.</maml:para>
            <maml:para>This parameter accepts an array of strings. Each string is a separate binding, not a sequence of keys for a single binding.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Function</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an existing key handler provided by PSReadLine. This parameter lets you rebind existing key bindings, or bind a handler that is currently unbound.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ViMode</maml:name>
          <maml:description>
            <maml:para>Specify which vi mode the binding applies to.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- `Insert`</maml:para>
            <maml:para>- `Command`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.ViMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>BriefDescription</maml:name>
        <maml:description>
          <maml:para>A brief description of the key binding. This description is displayed by the `Get-PSReadLineKeyHandler` cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="Key">
        <maml:name>Chord</maml:name>
        <maml:description>
          <maml:para>The key or sequence of keys to be bound to a function or script block. Use a single string to specify a single binding. If the binding is a sequence of keys, separate the keys by a comma, as in the following example:</maml:para>
          <maml:para>`Ctrl+X,Ctrl+L`</maml:para>
          <maml:para>&gt; [!NOTE] &gt; As of PSReadLine 2.0.0, the Chord parameter is case-sensitive . Meaning, &gt; &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;x&lt;/kbd&gt; create different bindings.</maml:para>
          <maml:para>This parameter accepts an array of strings. Each string is a separate binding, not a sequence of keys for a single binding.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="LongDescription">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies a more detailed description of the key binding that is visible in the output of the `Get-PSReadLineKeyHandler` cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Function</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an existing key handler provided by PSReadLine. This parameter lets you rebind existing key bindings, or bind a handler that is currently unbound.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>ScriptBlock</maml:name>
        <maml:description>
          <maml:para>Specifies a script block value to run when the chord is entered. PSReadLine passes one or two parameters to this script block. The first parameter is a ConsoleKeyInfo object representing the key pressed. The second argument can be any object depending on the context.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.ScriptBlock</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.ScriptBlock</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ViMode</maml:name>
        <maml:description>
          <maml:para>Specify which vi mode the binding applies to.</maml:para>
          <maml:para>Valid values are:</maml:para>
          <maml:para>- `Insert`</maml:para>
          <maml:para>- `Command`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.ViMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to this cmdlet.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not generate any output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Bind the arrow key to a function ---------</maml:title>
        <dev:code>Set-PSReadLineKeyHandler -Chord UpArrow -Function HistorySearchBackward</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------- Example 2: Bind a key to a script block -----------</maml:title>
        <dev:code>Set-PSReadLineKeyHandler -Chord Ctrl+B -ScriptBlock {
    [Microsoft.PowerShell.PSConsoleReadLine]::RevertLine()
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert('build')
    [Microsoft.PowerShell.PSConsoleReadLine]::AcceptLine()
}</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/psreadline/set-psreadlinekeyhandler?view=powershell-7.1&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-PSReadLineOption</command:name>
      <command:verb>Set</command:verb>
      <command:noun>PSReadLineOption</command:noun>
      <maml:description>
        <maml:para>Customizes the behavior of command line editing in PSReadLine .</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>The `Set-PSReadLineOption` cmdlet customizes the behavior of the PSReadLine module when you're editing the command line. To view the PSReadLine settings, use `Get-PSReadLineOption`.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-PSReadLineOption</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>AddToHistoryHandler</maml:name>
          <maml:description>
            <maml:para>Specifies a ScriptBlock that controls which commands get added to PSReadLine history.</maml:para>
            <maml:para>The ScriptBlock receives the command line as input. If the ScriptBlock returns `$True`, the command line is added to the history.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Func`2[System.String,System.Object]</command:parameterValue>
          <dev:type>
            <maml:name>System.Func`2[System.String,System.Object]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>AnsiEscapeTimeout</maml:name>
          <maml:description>
            <maml:para>This option is specific to Windows when input is redirected, for example, when running under `tmux` or `screen`.</maml:para>
            <maml:para>With redirected input on Windows, many keys are sent as a sequence of characters starting with the escape character. It's impossible to distinguish between a single escape character followed by more characters and a valid escape sequence.</maml:para>
            <maml:para>The assumption is that the terminal can send the characters faster than a user types. PSReadLine waits for this timeout before concluding that it has received a complete escape sequence.</maml:para>
            <maml:para>If you see random or unexpected characters when you type, you can adjust this timeout.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>100</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>BellStyle</maml:name>
          <maml:description>
            <maml:para>Specifies how PSReadLine responds to various error and ambiguous conditions.</maml:para>
            <maml:para>The valid values are as follows:</maml:para>
            <maml:para>- Audible : A short beep. - Visual : Text flashes briefly. - None : No feedback.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.BellStyle</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.BellStyle</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Audible</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Colors</maml:name>
          <maml:description>
            <maml:para>The Colors parameter specifies various colors used by PSReadLine .</maml:para>
            <maml:para>The argument is a hash table where the keys specify which element and the values specify the color. For more information, see about_Hash_Tables (/powershell/module/microsoft.powershell.core/about/about_hash_tables).</maml:para>
            <maml:para>Colors can be either a value from ConsoleColor , for example `[ConsoleColor]::Red`, or a valid ANSI escape sequence. Valid escape sequences depend on your terminal. In PowerShell 5.0, an example escape sequence for red text is `$([char]0x1b)[91m`. In PowerShell 6 and above, the same escape sequence is `` `e[91m``. You can specify other escape sequences including the following types:</maml:para>
            <maml:para>- 256 color</maml:para>
            <maml:para>- 24-bit color</maml:para>
            <maml:para>- Foreground, background, or both</maml:para>
            <maml:para>- Inverse, bold</maml:para>
            <maml:para></maml:para>
            <maml:para>For more information about ANSI color codes, see ANSI escape code (https://wikipedia.org/wiki/ANSI_escape_code#Colors_)in Wikipedia.</maml:para>
            <maml:para>The valid keys include:</maml:para>
            <maml:para>- ContinuationPrompt : The color of the continuation prompt. - Emphasis : The emphasis color. For example, the matching text when searching history. - Error : The error color. For example, in the prompt. - Selection : The color to highlight the menu selection or selected text. - Default : The default token color. - Comment : The comment token color. - Keyword : The keyword token color. - String : The string token color. - Operator : The operator token color. - Variable : The variable token color. - Command : The command token color. - Parameter : The parameter token color. - Type : The type token color. - Number : The number token color. - Member : The member name token color. - InlinePrediction : The color for the inline view of the predictive suggestion.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Hashtable</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>CommandValidationHandler</maml:name>
          <maml:description>
            <maml:para>Specifies a ScriptBlock that is called from ValidateAndAcceptLine . If an exception is thrown, validation fails and the error is reported.</maml:para>
            <maml:para>Before throwing an exception, the validation handler can place the cursor at the point of the error to make it easier to fix. A validation handler can also change the command line, such as to correct common typographical errors. ValidateAndAcceptLine is used to avoid cluttering your history with commands that can't work.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Action`1[System.Management.Automation.Language.CommandAst]</command:parameterValue>
          <dev:type>
            <maml:name>System.Action`1[System.Management.Automation.Language.CommandAst]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>CompletionQueryItems</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of completion items that are shown without prompting.</maml:para>
            <maml:para>If the number of items to show is greater than this value, PSReadLine prompts yes/no before displaying the completion items.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>100</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ContinuationPrompt</maml:name>
          <maml:description>
            <maml:para>Specifies the string displayed at the beginning of the subsequent lines when multi-line input is entered. The default is double greater-than signs (`&gt;&gt;`). An empty string is valid.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>&gt;&gt;</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DingDuration</maml:name>
          <maml:description>
            <maml:para>Specifies the duration of the beep when BellStyle is set to Audible .</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>50ms</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>DingTone</maml:name>
          <maml:description>
            <maml:para>Specifies the tone in Hertz (Hz) of the beep when BellStyle is set to Audible .</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>1221</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>EditMode</maml:name>
          <maml:description>
            <maml:para>Specifies the command line editing mode. Using this parameter resets any key bindings set by `Set-PSReadLineKeyHandler`.</maml:para>
            <maml:para>The valid values are as follows:</maml:para>
            <maml:para>- Windows : Key bindings emulate PowerShell, cmd, and Visual Studio. - Emacs : Key bindings emulate Bash or Emacs. - Vi : Key bindings emulate Vi.</maml:para>
            <maml:para>Use `Get-PSReadLineKeyHandler` to see the key bindings for the currently configured EditMode .</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.EditMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.EditMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Windows</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ExtraPromptLineCount</maml:name>
          <maml:description>
            <maml:para>Specifies the number of extra lines.</maml:para>
            <maml:para>If your prompt spans more than one line, specify a value for this parameter. Use this option when you want extra lines to be available when PSReadLine displays the prompt after showing some output. For example, PSReadLine returns a list of completions.</maml:para>
            <maml:para>This option is needed less than in previous versions of PSReadLine , but is useful when the `InvokePrompt` function is used.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>0</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>HistoryNoDuplicates</maml:name>
          <maml:description>
            <maml:para>This option controls the recall behavior. Duplicate commands are still added to the history file. When this option is set, only the most recent invocation appears when recalling commands. Repeated commands are added to history to preserve ordering during recall. However, you typically don't want to see the command multiple times when recalling or searching the history.</maml:para>
            <maml:para>By default, the HistoryNoDuplicates property of the global PSConsoleReadLineOptions object is set to `True`. Using this SwitchParameter sets the property value to `True`. To change the property value, you must specify the value of the SwitchParameter as follows: `-HistoryNoDuplicates:$False`.</maml:para>
            <maml:para>Using the following command, you can set the property value directly:</maml:para>
            <maml:para>`(Get-PSReadLineOption).HistoryNoDuplicates = $False`</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>HistorySavePath</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the file where history is saved. Computers running Windows or non-Windows platforms store the file in different locations. The filename is stored in a variable `$($host.Name)_history.txt`, for example `ConsoleHost_history.txt`.</maml:para>
            <maml:para>If you don't use this parameter, the default path is as follows: Windows - `$env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\$($host.Name)_history.txt` non-Windows - `$env:XDG_DATA_HOME/powershell/PSReadLine/$($host.Name)_history.txt`</maml:para>
            <maml:para>- `$env:HOME/.local/share/powershell/PSReadLine/$($host.Name)_history.txt`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>A file named $($host.Name)_history.txt in $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine on Windows and $env:XDG_DATA_HOME/powershell/PSReadLine or $env:HOME/.local/share/powershell/PSReadLine on non-Windows platforms</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>HistorySaveStyle</maml:name>
          <maml:description>
            <maml:para>Specifies how PSReadLine saves history.</maml:para>
            <maml:para>Valid values are as follows:</maml:para>
            <maml:para>- SaveIncrementally : Save history after each command is executed and share across multiple   instances of PowerShell. - SaveAtExit : Append history file when PowerShell exits. - SaveNothing : Don't use a history file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.HistorySaveStyle</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.HistorySaveStyle</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>SaveIncrementally</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>HistorySearchCaseSensitive</maml:name>
          <maml:description>
            <maml:para>Specifies that history searching is case-sensitive in functions like ReverseSearchHistory or HistorySearchBackward .</maml:para>
            <maml:para>By default, the HistorySearchCaseSensitive property of the global PSConsoleReadLineOptions object is set to `False`. Using this SwitchParameter sets the property value to `True`. To change the property value back, you must specify the value of the SwitchParameter as follows: `-HistorySearchCaseSensitive:$False`.</maml:para>
            <maml:para>Using the following command, you can set the property value directly:</maml:para>
            <maml:para>`(Get-PSReadLineOption).HistorySearchCaseSensitive = $False`</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>HistorySearchCursorMovesToEnd</maml:name>
          <maml:description>
            <maml:para>Indicates that the cursor moves to the end of commands that you load from history by using a search. When this parameter is set to `$False`, the cursor remains at the position it was when you pressed the up or down arrows.</maml:para>
            <maml:para>By default, the HistorySearchCursorMovesToEnd property of the global PSConsoleReadLineOptions object is set to `False`. Using this SwitchParameter set the property value to `True`. To change the property value back, you must specify the value of the SwitchParameter as follows: `-HistorySearchCursorMovesToEnd:$False`.</maml:para>
            <maml:para>Using the following command, you can set the property value directly:</maml:para>
            <maml:para>`(Get-PSReadLineOption).HistorySearchCursorMovesToEnd = $False`</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaximumHistoryCount</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of commands to save in PSReadLine history. PSReadLine history is separate from PowerShell history.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaximumKillRingCount</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of items stored in the kill ring.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>10</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PredictionSource</maml:name>
          <maml:description>
            <maml:para>Specifies the source for PSReadLine to get predictive suggestions.</maml:para>
            <maml:para>Valid values are:</maml:para>
            <maml:para>- None : disable the predictive suggestion feature - History : get predictive suggestions from history only</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">PredictionSource</command:parameterValue>
          <dev:type>
            <maml:name>PredictionSource</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>PromptText</maml:name>
          <maml:description>
            <maml:para>When there's a parse error, PSReadLine changes a part of the prompt red. PSReadLine analyzes your prompt function to determine how to change only the color of part of your prompt. This analysis isn't 100% reliable.</maml:para>
            <maml:para>Use this option if PSReadLine is changing your prompt in unexpected ways. Include any trailing whitespace.</maml:para>
            <maml:para>For example, if your prompt function looked like the following example:</maml:para>
            <maml:para>`function prompt { Write-Host -NoNewLine -ForegroundColor Yellow "$pwd"; return "# " }`</maml:para>
            <maml:para>Then set:</maml:para>
            <maml:para>`Set-PSReadLineOption -PromptText "# "`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>&gt;</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ShowToolTips</maml:name>
          <maml:description>
            <maml:para>When displaying possible completions, tooltips are shown in the list of completions.</maml:para>
            <maml:para>This option is enabled by default. This option wasn't enabled by default in prior versions of PSReadLine . To disable, set this option to `$False`.</maml:para>
            <maml:para>By default, the ShowToolTips property of the global PSConsoleReadLineOptions object is set to `True`. Using this SwitchParameter sets the property value to `True`. To change the property value, you must specify the value of the SwitchParameter as follows: `-ShowToolTips:$False`.</maml:para>
            <maml:para>Using the following command, you can set the property value directly:</maml:para>
            <maml:para>`(Get-PSReadLineOption).ShowToolTips = $False`</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>True</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ViModeChangeHandler</maml:name>
          <maml:description>
            <maml:para>When the ViModeIndicator is set to `Script`, the script block provided will be invoked every time the mode changes. The script block is provided one argument of type `ViMode`.</maml:para>
            <maml:para>This parameter was introduced in PowerShell 7.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.ScriptBlock</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.ScriptBlock</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>ViModeIndicator</maml:name>
          <maml:description>
            <maml:para>This option sets the visual indication for the current Vi mode. Either insert mode or command mode.</maml:para>
            <maml:para>The valid values are as follows:</maml:para>
            <maml:para>- None : There's no indication. - Prompt : The prompt changes color. - Cursor : The cursor changes size. - Script : User-specified text is printed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViModeStyle</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.PowerShell.ViModeStyle</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>WordDelimiters</maml:name>
          <maml:description>
            <maml:para>Specifies the characters that delimit words for functions like ForwardWord or KillWord .</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>;:,.[]{}()/\|^&amp;*-=+'"-—―</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>AddToHistoryHandler</maml:name>
        <maml:description>
          <maml:para>Specifies a ScriptBlock that controls which commands get added to PSReadLine history.</maml:para>
          <maml:para>The ScriptBlock receives the command line as input. If the ScriptBlock returns `$True`, the command line is added to the history.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Func`2[System.String,System.Object]</command:parameterValue>
        <dev:type>
          <maml:name>System.Func`2[System.String,System.Object]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>AnsiEscapeTimeout</maml:name>
        <maml:description>
          <maml:para>This option is specific to Windows when input is redirected, for example, when running under `tmux` or `screen`.</maml:para>
          <maml:para>With redirected input on Windows, many keys are sent as a sequence of characters starting with the escape character. It's impossible to distinguish between a single escape character followed by more characters and a valid escape sequence.</maml:para>
          <maml:para>The assumption is that the terminal can send the characters faster than a user types. PSReadLine waits for this timeout before concluding that it has received a complete escape sequence.</maml:para>
          <maml:para>If you see random or unexpected characters when you type, you can adjust this timeout.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>100</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>BellStyle</maml:name>
        <maml:description>
          <maml:para>Specifies how PSReadLine responds to various error and ambiguous conditions.</maml:para>
          <maml:para>The valid values are as follows:</maml:para>
          <maml:para>- Audible : A short beep. - Visual : Text flashes briefly. - None : No feedback.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.BellStyle</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.BellStyle</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Audible</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Colors</maml:name>
        <maml:description>
          <maml:para>The Colors parameter specifies various colors used by PSReadLine .</maml:para>
          <maml:para>The argument is a hash table where the keys specify which element and the values specify the color. For more information, see about_Hash_Tables (/powershell/module/microsoft.powershell.core/about/about_hash_tables).</maml:para>
          <maml:para>Colors can be either a value from ConsoleColor , for example `[ConsoleColor]::Red`, or a valid ANSI escape sequence. Valid escape sequences depend on your terminal. In PowerShell 5.0, an example escape sequence for red text is `$([char]0x1b)[91m`. In PowerShell 6 and above, the same escape sequence is `` `e[91m``. You can specify other escape sequences including the following types:</maml:para>
          <maml:para>- 256 color</maml:para>
          <maml:para>- 24-bit color</maml:para>
          <maml:para>- Foreground, background, or both</maml:para>
          <maml:para>- Inverse, bold</maml:para>
          <maml:para></maml:para>
          <maml:para>For more information about ANSI color codes, see ANSI escape code (https://wikipedia.org/wiki/ANSI_escape_code#Colors_)in Wikipedia.</maml:para>
          <maml:para>The valid keys include:</maml:para>
          <maml:para>- ContinuationPrompt : The color of the continuation prompt. - Emphasis : The emphasis color. For example, the matching text when searching history. - Error : The error color. For example, in the prompt. - Selection : The color to highlight the menu selection or selected text. - Default : The default token color. - Comment : The comment token color. - Keyword : The keyword token color. - String : The string token color. - Operator : The operator token color. - Variable : The variable token color. - Command : The command token color. - Parameter : The parameter token color. - Type : The type token color. - Number : The number token color. - Member : The member name token color. - InlinePrediction : The color for the inline view of the predictive suggestion.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>CommandValidationHandler</maml:name>
        <maml:description>
          <maml:para>Specifies a ScriptBlock that is called from ValidateAndAcceptLine . If an exception is thrown, validation fails and the error is reported.</maml:para>
          <maml:para>Before throwing an exception, the validation handler can place the cursor at the point of the error to make it easier to fix. A validation handler can also change the command line, such as to correct common typographical errors. ValidateAndAcceptLine is used to avoid cluttering your history with commands that can't work.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Action`1[System.Management.Automation.Language.CommandAst]</command:parameterValue>
        <dev:type>
          <maml:name>System.Action`1[System.Management.Automation.Language.CommandAst]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>CompletionQueryItems</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum number of completion items that are shown without prompting.</maml:para>
          <maml:para>If the number of items to show is greater than this value, PSReadLine prompts yes/no before displaying the completion items.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>100</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ContinuationPrompt</maml:name>
        <maml:description>
          <maml:para>Specifies the string displayed at the beginning of the subsequent lines when multi-line input is entered. The default is double greater-than signs (`&gt;&gt;`). An empty string is valid.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>&gt;&gt;</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DingDuration</maml:name>
        <maml:description>
          <maml:para>Specifies the duration of the beep when BellStyle is set to Audible .</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>50ms</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>DingTone</maml:name>
        <maml:description>
          <maml:para>Specifies the tone in Hertz (Hz) of the beep when BellStyle is set to Audible .</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>1221</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>EditMode</maml:name>
        <maml:description>
          <maml:para>Specifies the command line editing mode. Using this parameter resets any key bindings set by `Set-PSReadLineKeyHandler`.</maml:para>
          <maml:para>The valid values are as follows:</maml:para>
          <maml:para>- Windows : Key bindings emulate PowerShell, cmd, and Visual Studio. - Emacs : Key bindings emulate Bash or Emacs. - Vi : Key bindings emulate Vi.</maml:para>
          <maml:para>Use `Get-PSReadLineKeyHandler` to see the key bindings for the currently configured EditMode .</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.EditMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.EditMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Windows</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ExtraPromptLineCount</maml:name>
        <maml:description>
          <maml:para>Specifies the number of extra lines.</maml:para>
          <maml:para>If your prompt spans more than one line, specify a value for this parameter. Use this option when you want extra lines to be available when PSReadLine displays the prompt after showing some output. For example, PSReadLine returns a list of completions.</maml:para>
          <maml:para>This option is needed less than in previous versions of PSReadLine , but is useful when the `InvokePrompt` function is used.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>0</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>HistoryNoDuplicates</maml:name>
        <maml:description>
          <maml:para>This option controls the recall behavior. Duplicate commands are still added to the history file. When this option is set, only the most recent invocation appears when recalling commands. Repeated commands are added to history to preserve ordering during recall. However, you typically don't want to see the command multiple times when recalling or searching the history.</maml:para>
          <maml:para>By default, the HistoryNoDuplicates property of the global PSConsoleReadLineOptions object is set to `True`. Using this SwitchParameter sets the property value to `True`. To change the property value, you must specify the value of the SwitchParameter as follows: `-HistoryNoDuplicates:$False`.</maml:para>
          <maml:para>Using the following command, you can set the property value directly:</maml:para>
          <maml:para>`(Get-PSReadLineOption).HistoryNoDuplicates = $False`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>HistorySavePath</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the file where history is saved. Computers running Windows or non-Windows platforms store the file in different locations. The filename is stored in a variable `$($host.Name)_history.txt`, for example `ConsoleHost_history.txt`.</maml:para>
          <maml:para>If you don't use this parameter, the default path is as follows: Windows - `$env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\$($host.Name)_history.txt` non-Windows - `$env:XDG_DATA_HOME/powershell/PSReadLine/$($host.Name)_history.txt`</maml:para>
          <maml:para>- `$env:HOME/.local/share/powershell/PSReadLine/$($host.Name)_history.txt`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>A file named $($host.Name)_history.txt in $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine on Windows and $env:XDG_DATA_HOME/powershell/PSReadLine or $env:HOME/.local/share/powershell/PSReadLine on non-Windows platforms</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>HistorySaveStyle</maml:name>
        <maml:description>
          <maml:para>Specifies how PSReadLine saves history.</maml:para>
          <maml:para>Valid values are as follows:</maml:para>
          <maml:para>- SaveIncrementally : Save history after each command is executed and share across multiple   instances of PowerShell. - SaveAtExit : Append history file when PowerShell exits. - SaveNothing : Don't use a history file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.HistorySaveStyle</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.HistorySaveStyle</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>SaveIncrementally</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>HistorySearchCaseSensitive</maml:name>
        <maml:description>
          <maml:para>Specifies that history searching is case-sensitive in functions like ReverseSearchHistory or HistorySearchBackward .</maml:para>
          <maml:para>By default, the HistorySearchCaseSensitive property of the global PSConsoleReadLineOptions object is set to `False`. Using this SwitchParameter sets the property value to `True`. To change the property value back, you must specify the value of the SwitchParameter as follows: `-HistorySearchCaseSensitive:$False`.</maml:para>
          <maml:para>Using the following command, you can set the property value directly:</maml:para>
          <maml:para>`(Get-PSReadLineOption).HistorySearchCaseSensitive = $False`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>HistorySearchCursorMovesToEnd</maml:name>
        <maml:description>
          <maml:para>Indicates that the cursor moves to the end of commands that you load from history by using a search. When this parameter is set to `$False`, the cursor remains at the position it was when you pressed the up or down arrows.</maml:para>
          <maml:para>By default, the HistorySearchCursorMovesToEnd property of the global PSConsoleReadLineOptions object is set to `False`. Using this SwitchParameter set the property value to `True`. To change the property value back, you must specify the value of the SwitchParameter as follows: `-HistorySearchCursorMovesToEnd:$False`.</maml:para>
          <maml:para>Using the following command, you can set the property value directly:</maml:para>
          <maml:para>`(Get-PSReadLineOption).HistorySearchCursorMovesToEnd = $False`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>MaximumHistoryCount</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum number of commands to save in PSReadLine history. PSReadLine history is separate from PowerShell history.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>MaximumKillRingCount</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum number of items stored in the kill ring.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>10</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PredictionSource</maml:name>
        <maml:description>
          <maml:para>Specifies the source for PSReadLine to get predictive suggestions.</maml:para>
          <maml:para>Valid values are:</maml:para>
          <maml:para>- None : disable the predictive suggestion feature - History : get predictive suggestions from history only</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">PredictionSource</command:parameterValue>
        <dev:type>
          <maml:name>PredictionSource</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>PromptText</maml:name>
        <maml:description>
          <maml:para>When there's a parse error, PSReadLine changes a part of the prompt red. PSReadLine analyzes your prompt function to determine how to change only the color of part of your prompt. This analysis isn't 100% reliable.</maml:para>
          <maml:para>Use this option if PSReadLine is changing your prompt in unexpected ways. Include any trailing whitespace.</maml:para>
          <maml:para>For example, if your prompt function looked like the following example:</maml:para>
          <maml:para>`function prompt { Write-Host -NoNewLine -ForegroundColor Yellow "$pwd"; return "# " }`</maml:para>
          <maml:para>Then set:</maml:para>
          <maml:para>`Set-PSReadLineOption -PromptText "# "`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>&gt;</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ShowToolTips</maml:name>
        <maml:description>
          <maml:para>When displaying possible completions, tooltips are shown in the list of completions.</maml:para>
          <maml:para>This option is enabled by default. This option wasn't enabled by default in prior versions of PSReadLine . To disable, set this option to `$False`.</maml:para>
          <maml:para>By default, the ShowToolTips property of the global PSConsoleReadLineOptions object is set to `True`. Using this SwitchParameter sets the property value to `True`. To change the property value, you must specify the value of the SwitchParameter as follows: `-ShowToolTips:$False`.</maml:para>
          <maml:para>Using the following command, you can set the property value directly:</maml:para>
          <maml:para>`(Get-PSReadLineOption).ShowToolTips = $False`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>True</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ViModeChangeHandler</maml:name>
        <maml:description>
          <maml:para>When the ViModeIndicator is set to `Script`, the script block provided will be invoked every time the mode changes. The script block is provided one argument of type `ViMode`.</maml:para>
          <maml:para>This parameter was introduced in PowerShell 7.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.ScriptBlock</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.ScriptBlock</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>ViModeIndicator</maml:name>
        <maml:description>
          <maml:para>This option sets the visual indication for the current Vi mode. Either insert mode or command mode.</maml:para>
          <maml:para>The valid values are as follows:</maml:para>
          <maml:para>- None : There's no indication. - Prompt : The prompt changes color. - Cursor : The cursor changes size. - Script : User-specified text is printed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.PowerShell.ViModeStyle</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.ViModeStyle</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>WordDelimiters</maml:name>
        <maml:description>
          <maml:para>Specifies the characters that delimit words for functions like ForwardWord or KillWord .</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>;:,.[]{}()/\|^&amp;*-=+'"-—―</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You cannot pipe objects to `Set-PSReadLineOption.`</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not generate any output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------- Example 1: Set foreground and background colors -------</maml:title>
        <dev:code>Set-PSReadLineOption -Colors @{ "Comment"="`e[32;47m" }</dev:code>
        <dev:remarks>
          <maml:para>You can choose to set only a foreground text color. For example, a bright green foreground text color for the Comment token: ``"Comment"="`e[92m"``.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------------ Example 2: Set bell style ------------------</maml:title>
        <dev:code>Set-PSReadLineOption -BellStyle Audible -DingTone 1221 -DingDuration 60</dev:code>
        <dev:remarks>
          <maml:para>&gt; [!NOTE] &gt; This feature may not work in all hosts on platforms.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>--------------- Example 3: Set multiple options ---------------</maml:title>
        <dev:code>$PSReadLineOptions = @{
    EditMode = "Emacs"
    HistoryNoDuplicates = $true
    HistorySearchCursorMovesToEnd = $true
    Colors = @{
        "Command" = "#8181f7"
    }
}
Set-PSReadLineOption @PSReadLineOptions</dev:code>
        <dev:remarks>
          <maml:para>The `$PSReadLineOptions` hash table sets the keys and values. `Set-PSReadLineOption` uses the keys and values with `@PSReadLineOptions` to update the PSReadLine options.</maml:para>
          <maml:para>You can view the keys and values entering the hash table name, `$PSReadLineOptions` on the PowerShell command line.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------ Example 4: Set multiple color options ------------</maml:title>
        <dev:code>Set-PSReadLineOption -Colors @{
  Command            = 'Magenta'
  Number             = 'DarkGray'
  Member             = 'DarkGray'
  Operator           = 'DarkGray'
  Type               = 'DarkGray'
  Variable           = 'DarkGreen'
  Parameter          = 'DarkGreen'
  ContinuationPrompt = 'DarkGray'
  Default            = 'DarkGray'
}</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Example 5: Set color values for multiple types --------</maml:title>
        <dev:code>Set-PSReadLineOption -Colors @{
 # Use a ConsoleColor enum
 "Error" = [ConsoleColor]::DarkRed

 # 24 bit color escape sequence
 "String" = "$([char]0x1b)[38;5;100m"

 # RGB value
 "Command" = "#8181f7"
}</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title> Example 6: Use ViModeChangeHandler to display Vi mode changes </maml:title>
        <dev:code>function OnViModeChange {
    if ($args[0] -eq 'Command') {
        # Set the cursor to a blinking block.
        Write-Host -NoNewLine "`e[1 q"
    } else {
        # Set the cursor to a blinking line.
        Write-Host -NoNewLine "`e[5 q"
    }
}
Set-PSReadLineOption -ViModeIndicator Script -ViModeChangeHandler $Function:OnViModeChange</dev:code>
        <dev:remarks>
          <maml:para>The OnViModeChange function sets the cursor options for the Vi modes: insert and command. ViModeChangeHandler uses the `Function:` provider to reference OnViModeChange as a script block object.</maml:para>
          <maml:para>For more information, see about_Providers (/powershell/module/microsoft.powershell.core/about/about_providers).</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/psreadline/set-psreadlineoption?view=powershell-7.1&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_PSReadLine</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-PSReadLineOption</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-PSReadLineKeyHandler</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>