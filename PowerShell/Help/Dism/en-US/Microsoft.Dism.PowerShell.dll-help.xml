<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns="http://msh" schema="maml">
  <!-- Updatable Help Version 5.0.1.0 -->
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-AppxProvisionedPackage</command:name>
      <maml:description>
        <maml:para>Adds an app package (.appx) that will install for each new user to a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Add</command:verb>
      <command:noun>AppxProvisionedPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Add-AppxProvisionedPackage cmdlet adds an app package (.appx) that will install for each new user to a Windows image. If the package has dependencies that are architecture-specific, you must install the applicable architectures for the dependency on the target image. For example, you must install the x86 dependency on the x86 image. </maml:para>
      <maml:para>You cannot install an app package (.appx) on an operating system that does not support Windows® 8 apps. Apps are not supported on Server Core installations of Windows Server® 2012, Windows® Preinstallation Environment (Windows PE) 4.0, or on any versions of Windows older than Windows 8 and Windows Server 2012. </maml:para>
      <maml:para>To install and run apps on Windows Server 2012, you must install the <maml:navigationLink><maml:linkText>Desktop Experience</maml:linkText><maml:uri></maml:uri></maml:navigationLink>. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
      <maml:para>Use the PackagePath, DependencyPackagePath, and LicensePath parameters to specify the location of all the files that are needed to add the provisioned app package (.appx). Use these parameters to provision line-of-business apps. </maml:para>
      <maml:para>Use the FolderPath parameter to specify the location of a folder of unpacked app package (.appx) files that includes any dependency packages and a license file. </maml:para>
      <maml:para>To add an app package (.appx) for a particular user, or to test a package while developing your app, use the Add-AppxPackage cmdlet instead. </maml:para>
      <maml:para>For more information, including requirements for app package provisioning, see <maml:navigationLink><maml:linkText>Sideload Apps with DISM</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkID=231020) and <maml:navigationLink><maml:linkText>How to develop an OEM app that uses a custom file</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkID=279989) in the TechNet Library..</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CustomDataPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>DependencyPackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a dependency package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>FolderPath</maml:name>
          <maml:description>
            <maml:para>Specifies a folder of unpacked app package files containing a main package and any dependency packages. This folder must also contain your application license.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LicensePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the .xml file containing your application license.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the app package (.appx) to add to the Windows image. This package will be added for every new user account. To add an app package (.appx) for a particular user or to test a package while developing your app, use the Add-AppxPackage cmdlet instead. </maml:para>
            <maml:para>The PackagePath parameter is only supported for offline servicing when the technician computer is running a version of Windows that supports Windows 8 apps.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipLicense</maml:name>
          <maml:description>
            <maml:para>Adds an app package without a license file.</maml:para>
            <maml:para>Only use SkipLicense with apps that do not require a license on Enterprise or Server versions of the operating system. Using SkipLicense in other scenarios can compromise an image.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Add-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CustomDataPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>DependencyPackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a dependency package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>FolderPath</maml:name>
          <maml:description>
            <maml:para>Specifies a folder of unpacked app package files containing a main package and any dependency packages. This folder must also contain your application license.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LicensePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the .xml file containing your application license.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the app package (.appx) to add to the Windows image. This package will be added for every new user account. To add an app package (.appx) for a particular user or to test a package while developing your app, use the Add-AppxPackage cmdlet instead. </maml:para>
            <maml:para>The PackagePath parameter is only supported for offline servicing when the technician computer is running a version of Windows that supports Windows 8 apps.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipLicense</maml:name>
          <maml:description>
            <maml:para>Adds an app package without a license file.</maml:para>
            <maml:para>Only use SkipLicense with apps that do not require a license on Enterprise or Server versions of the operating system. Using SkipLicense in other scenarios can compromise an image.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>CustomDataPath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a custom data file. The custom data file will be renamed custom.data and saved in the app data store.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>DependencyPackagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a dependency package.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>FolderPath</maml:name>
        <maml:description>
          <maml:para>Specifies a folder of unpacked app package files containing a main package and any dependency packages. This folder must also contain your application license.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>LicensePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the .xml file containing your application license.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the app package (.appx) to add to the Windows image. This package will be added for every new user account. To add an app package (.appx) for a particular user or to test a package while developing your app, use the Add-AppxPackage cmdlet instead. </maml:para>
          <maml:para>The PackagePath parameter is only supported for offline servicing when the technician computer is running a version of Windows that supports Windows 8 apps.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SkipLicense</maml:name>
        <maml:description>
          <maml:para>Adds an app package without a license file.</maml:para>
          <maml:para>Only use SkipLicense with apps that do not require a license on Enterprise or Server versions of the operating system. Using SkipLicense in other scenarios can compromise an image.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AppxPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add an app package to the running operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-AppxProvisionedPackage -Online –FolderPath "c:\Appx"
</dev:code>
        <dev:remarks>
          <maml:para>This command adds the app package, dependency packages, and license file from the c:\Appx folder to the running Windows operating system. The package will be installed for the current user and any new user account created on the computer.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Add an app package an operating system image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-AppxProvisionedPackage –Path c:\offline –PackagePath c:\Appx\myPackage.appx –DependencyPath c:\Appx\dependency1\dependencyPackage.appx –LicensePath c:\Appx\myLicense.xml
</dev:code>
        <dev:remarks>
          <maml:para>This command adds the app package, myPackage.appx, to the Windows image mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289347</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxPackage</maml:linkText>
        <maml:uri>
        </maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-AppXProvisionedDataFile</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-WindowsCapability</command:name>
      <maml:description>
        <maml:para>Installs a Windows capability package on the specified operating system image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Add</command:verb>
      <command:noun>WindowsCapability</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Add-WindowsCapability cmdlet acquires a Windows capability package from a priority-ordered list of source locations, and then installs the package on the specified operating system image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does not access Windows Update for the source package.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to add a Windows capability package to an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
            <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability to add to an operating system image. </maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet operates on a running operating system on the local host.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Add-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet does not access Windows Update for the source package.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to add a Windows capability package to an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
            <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability to add to an operating system image. </maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>LimitAccess</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet does not access Windows Update for the source package.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the identity of the capability to add to an operating system image. </maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Indicates that the cmdlet operates on a running operating system on the local host.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the files that are required to add a Windows capability package to an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
          <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
          <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
          <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>
          </maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add a Windows capability package to an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsCapability -Name "Language.TextToSpeech~~~fr-FR~0.0.1.0" -Path "C:\offline" -Source "C:\Windows\winsxs" 
</dev:code>
        <dev:remarks>
          <maml:para>This command adds a Windows capability package to the operating system image specified by the Name parameter at the path C:\offline. The Source parameter specifies the location of required files. </maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Add a Windows capability package to the local host</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsCapability -Name "Language.TextToSpeech~~~fr-FR~0.0.1.0" -Online -LimitAccess -Source "C:\Windows\winsxs" 
</dev:code>
        <dev:remarks>
          <maml:para>This command adds a windows capabilities package the local host while the operating system continues to run. </maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-WindowsDriver</command:name>
      <maml:description>
        <maml:para>Adds a driver to an offline Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Add</command:verb>
      <command:noun>WindowsDriver</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Add-WindowsDriver cmdlet adds third-party driver packages to an offline Windows image. </maml:para>
      <maml:para>Use the Path parameter to specify the location of a mounted Windows image. </maml:para>
      <maml:para>Use the Driver parameter to specify the location of an .inf driver file or a folder containing one or more .inf driver files. </maml:para>
      <maml:para>Use the ForceUnsigned parameter to add unsigned .inf files to an x64-based image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="none">
          <maml:name>AdvancedDriverObject</maml:name>
          <maml:description>
            <maml:para>Specifies an object containing detailed information about the driver you want to add. This can be piped from the output of Export-WindowsDriver or Get-WindowsDriver.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">AdvancedDriverObject</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="none">
          <maml:name>BasicDriverObject</maml:name>
          <maml:description>
            <maml:para>Provides an object containing basic information about the driver you want to add. This can be piped from the output of Export-WindowsDriver or Get-WindowsDriver.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">BasicDriverObject</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Driver</maml:name>
          <maml:description>
            <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want to add. When you specify a folder, .inf files that are not valid driver packages are ignored. These files are reported on the console when the command runs, and a warning is included in the log file. You will not receive an error message.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ForceUnsigned</maml:name>
          <maml:description>
            <maml:para>Adds unsigned drivers to an x64 image. The ForceUnsigned parameter overrides the requirement that drivers that are installed on X64-based computers must have a digital signature. For more information about driver signing requirements, see <maml:navigationLink><maml:linkText>Windows Deployment Options</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkId=214574) in the TechNet Library.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Recurse</maml:name>
          <maml:description>
            <maml:para>Includes all subfolders when searching for drivers to add.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="none">
        <maml:name>AdvancedDriverObject</maml:name>
        <maml:description>
          <maml:para>Specifies an object containing detailed information about the driver you want to add. This can be piped from the output of Export-WindowsDriver or Get-WindowsDriver.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">AdvancedDriverObject</command:parameterValue>
        <dev:type>
          <maml:name>AdvancedDriverObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="none">
        <maml:name>BasicDriverObject</maml:name>
        <maml:description>
          <maml:para>Provides an object containing basic information about the driver you want to add. This can be piped from the output of Export-WindowsDriver or Get-WindowsDriver.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">BasicDriverObject</command:parameterValue>
        <dev:type>
          <maml:name>BasicDriverObject</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Driver</maml:name>
        <maml:description>
          <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want to add. When you specify a folder, .inf files that are not valid driver packages are ignored. These files are reported on the console when the command runs, and a warning is included in the log file. You will not receive an error message.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ForceUnsigned</maml:name>
        <maml:description>
          <maml:para>Adds unsigned drivers to an x64 image. The ForceUnsigned parameter overrides the requirement that drivers that are installed on X64-based computers must have a digital signature. For more information about driver signing requirements, see <maml:navigationLink><maml:linkText>Windows Deployment Options</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkId=214574) in the TechNet Library.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Recurse</maml:name>
        <maml:description>
          <maml:para>Includes all subfolders when searching for drivers to add.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add drivers to an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsDriver –Path "c:\offline" –Driver "c:\test\drivers" –Recurse
</dev:code>
        <dev:remarks>
          <maml:para>This command adds any drivers in the c:\test\drivers folder or any of its subdirectories to the Windows operating system image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Add an unsigned driver package</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsDriver –Path "c:\offline" –Driver "c:\test\drivers\Usb\Usb.inf" -ForceUnsigned
</dev:code>
        <dev:remarks>
          <maml:para>This command adds the unsigned driver package, Usb.inf, to the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289348</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-WindowsImage</command:name>
      <maml:description>
        <maml:para>Adds an additional image to an existing image (.wim) file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Add</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Add-WindowsImage cmdlet adds an additional image to an existing image (.wim) file. Add-WindowsImage compares new files to the resources in the existing .wim file, specified by the Name parameter and the ImagePath parameter, and stores only a single copy of each unique file so that each file is only captured once. The .wim file can have only one assigned compression type. Therefore, you can only append files with the same compression type. 

The Add-WindowsImage cmdlet does not apply to virtual hard disk (VHD) files. 

It's important to note that you'll need to ensure you have enough disk space before you run Add-WindowsImage. If you run out of disk space while the image is being appended, you might corrupt the .wim file.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ConfigFilePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a configuration file that lists exclusions for image capture and compress commands. For more information, see DISM Configuration List and WimScrit.ini Files, http://go.microsoft.com/fwlink/?LinkID=313768.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies the description of the image to be captured.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRpFix</maml:name>
          <maml:description>
            <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Setbootable</maml:name>
          <maml:description>
            <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Verify</maml:name>
          <maml:description>
            <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the offline image to be added will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CapturePath</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the new files that will be compared to the resources in the existing .wim file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the WIM file containing the Windows image you want to compare against the new files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CapturePath</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the new files that will be compared to the resources in the existing .wim file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ConfigFilePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a configuration file that lists exclusions for image capture and compress commands. For more information, see DISM Configuration List and WimScrit.ini Files, http://go.microsoft.com/fwlink/?LinkID=313768.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies the description of the image to be captured.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the WIM file containing the Windows image you want to compare against the new files.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRpFix</maml:name>
        <maml:description>
          <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Setbootable</maml:name>
        <maml:description>
          <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Verify</maml:name>
        <maml:description>
          <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WIMBoot</maml:name>
        <maml:description>
          <maml:para>Specifies that the offline image to be added will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add files to an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsImage -ImagePath "C:\imagestore\custom.wim" -CapturePath d:\ -Name "Drive D"

</dev:code>
        <dev:remarks>
          <maml:para>This command adds files from d:\"Drive D" to the existing image at c:\imagestore\custom.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273947</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-WindowsPackage</command:name>
      <maml:description>
        <maml:para>Adds a single .cab or .msu file to a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Add</command:verb>
      <command:noun>WindowsPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Add-WindowsPackage cmdlet installs a specified .cab or .msu package in the image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IgnoreCheck</maml:name>
          <maml:description>
            <maml:para>Skips the applicability check for each package.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PreventPending</maml:name>
          <maml:description>
            <maml:para>Skips the installation of the package if the package or Windows image has pending online actions.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the package to add to the image.</maml:para>
            <maml:para>Valid values are: </maml:para>
            <maml:para>--A single .cab or .msu file. </maml:para>
            <maml:para>--A folder that contains a single expanded .cab file. </maml:para>
            <maml:para>--A folder that contains a single .msu file. </maml:para>
            <maml:para>--A folder that contains multiple .cab or .msu files.</maml:para>
            <maml:para>If PackagePath is a folder that contains a .cab or .msu files at its root, any subfolders will also be recursively checked for .cab and .msu files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Add-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IgnoreCheck</maml:name>
          <maml:description>
            <maml:para>Skips the applicability check for each package.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PreventPending</maml:name>
          <maml:description>
            <maml:para>Skips the installation of the package if the package or Windows image has pending online actions.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the package to add to the image.</maml:para>
            <maml:para>Valid values are: </maml:para>
            <maml:para>--A single .cab or .msu file. </maml:para>
            <maml:para>--A folder that contains a single expanded .cab file. </maml:para>
            <maml:para>--A folder that contains a single .msu file. </maml:para>
            <maml:para>--A folder that contains multiple .cab or .msu files.</maml:para>
            <maml:para>If PackagePath is a folder that contains a .cab or .msu files at its root, any subfolders will also be recursively checked for .cab and .msu files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>IgnoreCheck</maml:name>
        <maml:description>
          <maml:para>Skips the applicability check for each package.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>PackagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the package to add to the image.</maml:para>
          <maml:para>Valid values are: </maml:para>
          <maml:para>--A single .cab or .msu file. </maml:para>
          <maml:para>--A folder that contains a single expanded .cab file. </maml:para>
          <maml:para>--A folder that contains a single .msu file. </maml:para>
          <maml:para>--A folder that contains multiple .cab or .msu files.</maml:para>
          <maml:para>If PackagePath is a folder that contains a .cab or .msu files at its root, any subfolders will also be recursively checked for .cab and .msu files.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>PreventPending</maml:name>
        <maml:description>
          <maml:para>Skips the installation of the package if the package or Windows image has pending online actions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add a package to an online image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsPackage –Online –PackagePath "c:\packages\package.cab"
</dev:code>
        <dev:remarks>
          <maml:para>This command adds a .cab package to an online image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Add a file to a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsPackage –Path "c:\offline" –PackagePath "c:\packages\demo_package.msu" -PreventPending
</dev:code>
        <dev:remarks>
          <maml:para>This command adds an .msu file to a mounted Windows image unless there are pending actions on the package or the image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Add several packages to a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Add-WindowsPackage –Path "c:\offline" –PackagePath "c:\packages" -IgnoreCheck
</dev:code>
        <dev:remarks>
          <maml:para>This command adds all of the packages in a folder to a mounted Windows image without checking if they are applicable to the image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289349</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Clear-WindowsCorruptMountPoint</command:name>
      <maml:description>
        <maml:para>Deletes all of the resources associated with a mounted image that has been corrupted.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Clear</command:verb>
      <command:noun>WindowsCorruptMountPoint</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Clear-WindowsCorruptMountPoint cmdlet deletes all of the resources associated with a mounted image that has been corrupted.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Clear-WindowsCorruptMountPoint</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicDismObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BaseDismObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: deletes all resources associated with a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Clear-WindowsCorruptMountPoint
</dev:code>
        <dev:remarks>
          <maml:para>This command deletes all of the resources on the computer that are associated with a mounted image that has been corrupted.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289350</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Disable-WindowsOptionalFeature</command:name>
      <maml:description>
        <maml:para>Disables a feature in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Disable</command:verb>
      <command:noun>WindowsOptionalFeature</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Disable-WindowsOptionalFeature cmdlet disables or removes an optional feature in a Windows image. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
      <maml:para>The PackageName parameter specifies the package that the feature is a component of. This parameter is optional when the package is the Windows Foundation package. </maml:para>
      <maml:para>The FeatureName parameter specifies the feature to remove. You can specify more than one feature in the same package. Separate feature names with a comma. </maml:para>
      <maml:para>The Remove parameter removes the files for an optional feature without removing the feature's manifest from the image. You can use Remove to reduce the disk space that is used by a Windows image. After the image has been installed, you can restore the feature at any time from a remote source such as Windows Update or a network share. For more information about Features on Demand, see <maml:navigationLink><maml:linkText>Configure a Windows Repair Source</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkId=243077) in the TechNet Library.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Disable-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Remove</maml:name>
          <maml:description>
            <maml:para>Removes the files for an optional feature without removing the feature's manifest from the image. You can use Remove to reduce the disk space that is used by a Windows image. After the image has been installed, you can restore the feature at any time from a remote source such as Windows Update or a network share. </maml:para>
            <maml:para>Remove can only be used when servicing an image contain Windows 8 or Windows Server 2012 or a later version.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the feature to be disabled. Feature names are case sensitive if you are servicing a Windows image other than Windows® 8 or a later version. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Disable-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Remove</maml:name>
          <maml:description>
            <maml:para>Removes the files for an optional feature without removing the feature's manifest from the image. You can use Remove to reduce the disk space that is used by a Windows image. After the image has been installed, you can restore the feature at any time from a remote source such as Windows Update or a network share. </maml:para>
            <maml:para>Remove can only be used when servicing an image contain Windows 8 or Windows Server 2012 or a later version.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the feature to be disabled. Feature names are case sensitive if you are servicing a Windows image other than Windows® 8 or a later version. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>FeatureName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the feature to be disabled. Feature names are case sensitive if you are servicing a Windows image other than Windows® 8 or a later version. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_packagename</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Remove</maml:name>
        <maml:description>
          <maml:para>Removes the files for an optional feature without removing the feature's manifest from the image. You can use Remove to reduce the disk space that is used by a Windows image. After the image has been installed, you can restore the feature at any time from a remote source such as Windows Update or a network share. </maml:para>
          <maml:para>Remove can only be used when servicing an image contain Windows 8 or Windows Server 2012 or a later version.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Disable an optional feature</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Disable-WindowsOptionalFeature –Online –FeatureName "Hearts"
</dev:code>
        <dev:remarks>
          <maml:para>This command disables an optional feature, Hearts, from the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Disable a feature in an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Disable-WindowsOptionalFeature –Path "c:\offline" –FeatureName "Calc" –PackageName "Microsoft.Windows.Calc.Demo~6595b6144ccf1df~x86~en~1.0.0.0" -Remove
</dev:code>
        <dev:remarks>
          <maml:para>This command disables the optional feature, Calc, in the specified package in the Windows image that is mounted to c:\offline. It also removes all of the files except the manifest file, which reduces the size of the Windows image. The feature can be restored with the Enable-WindowsOptionalFeature cmdlet or by using Features on Demand at any time after the image is deployed.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289351</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Enable-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Dismount-WindowsImage</command:name>
      <maml:description>
        <maml:para>Dismounts a Windows image from the directory it is mapped to.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Dismount</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Dismount-WindowsImage cmdlet either saves or discards the changes to a Windows image and then dismounts the image.</maml:para>
      <maml:para>The Path parameter specifies the location of the mounted Windows image. </maml:para>
      <maml:para>The Append parameter specifies the location of an existing .wim file to add the Windows image to when you dismount it instead of overwriting the existing image. </maml:para>
      <maml:para>The CheckIntegrity parameter detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. </maml:para>
      <maml:para>The CheckIntegrity and Append parameters do not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Dismount-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Append</maml:name>
          <maml:description>
            <maml:para>Specifies the location of an existing .wim file to add the Windows image to when you dismount it instead of overwriting the existing image.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Save</maml:name>
          <maml:description>
            <maml:para>Saves the changes to a Windows image.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Dismount-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Discard</maml:name>
          <maml:description>
            <maml:para>Discards the changes to a Windows image.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Append</maml:name>
        <maml:description>
          <maml:para>Specifies the location of an existing .wim file to add the Windows image to when you dismount it instead of overwriting the existing image.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Discard</maml:name>
        <maml:description>
          <maml:para>Discards the changes to a Windows image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Save</maml:name>
        <maml:description>
          <maml:para>Saves the changes to a Windows image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.MountedImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BaseDismObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Dismount an operating system image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Dismount-WindowsImage –Path "c:\offline" -Save
</dev:code>
        <dev:remarks>
          <maml:para>This command dismounts the Windows Image mapped to c:\offline and saves any changes that were made while servicing the image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289352</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Enable-WindowsOptionalFeature</command:name>
      <maml:description>
        <maml:para>Enables a feature in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Enable</command:verb>
      <command:noun>WindowsOptionalFeature</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Enable-WindowsOptionalFeature cmdlet enables or restores an optional feature in a Windows image. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
      <maml:para>The PackageName parameter specifies the package that the feature is a component of. This parameter is optional when the package is the Windows Foundation package. </maml:para>
      <maml:para>The FeatureName parameter specifies the feature to add. You can specify more than one feature in the same package. Separate feature names with a comma. </maml:para>
      <maml:para>The Source parameter specifies the location of files that are needed to restore a removed feature. </maml:para>
      <maml:para>The LimitAccess parameter prevents access to Windows Update as a Source for restoring features to online images. The All parameter enables all parent features of the specified feature before enabling the specified feature. The parent feature will be enabled with default values.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Enable-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Enables all parent features of the specified feature. If a parent feature is required for the specified feature to be enabled in the image, All will enable the parent and all of its default dependencies.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Prevents DISM from contacting Windows Update when searching for the source files to restore a feature on an online image. </maml:para>
            <maml:para>LimitAccess can only be used when servicing images with Windows 8, Windows Server® 2012, Windows® Preinstallation Environment (Windows PE) 4.0 or a later version.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to restore a feature that has been removed from the image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate feature names with a comma. </maml:para>
            <maml:para>If you do not specify a Source for a feature that has been removed, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing an image with Windows 8 or Windows Server 2012 or a later version.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the feature to be enabled. Feature names are case sensitive if you are servicing a Windows image running a version of Windows earlier than Windows® 8. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Enable-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Enables all parent features of the specified feature. If a parent feature is required for the specified feature to be enabled in the image, All will enable the parent and all of its default dependencies.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Prevents DISM from contacting Windows Update when searching for the source files to restore a feature on an online image. </maml:para>
            <maml:para>LimitAccess can only be used when servicing images with Windows 8, Windows Server® 2012, Windows® Preinstallation Environment (Windows PE) 4.0 or a later version.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to restore a feature that has been removed from the image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate feature names with a comma. </maml:para>
            <maml:para>If you do not specify a Source for a feature that has been removed, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing an image with Windows 8 or Windows Server 2012 or a later version.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the feature to be enabled. Feature names are case sensitive if you are servicing a Windows image running a version of Windows earlier than Windows® 8. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Enables all parent features of the specified feature. If a parent feature is required for the specified feature to be enabled in the image, All will enable the parent and all of its default dependencies.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>FeatureName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the feature to be enabled. Feature names are case sensitive if you are servicing a Windows image running a version of Windows earlier than Windows® 8. You can use Get-WindowsOptionalFeature to find the name of the feature in the image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>LimitAccess</maml:name>
        <maml:description>
          <maml:para>Prevents DISM from contacting Windows Update when searching for the source files to restore a feature on an online image. </maml:para>
          <maml:para>LimitAccess can only be used when servicing images with Windows 8, Windows Server® 2012, Windows® Preinstallation Environment (Windows PE) 4.0 or a later version.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_packagename</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the files that are required to restore a feature that has been removed from the image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
          <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate feature names with a comma. </maml:para>
          <maml:para>If you do not specify a Source for a feature that has been removed, the default location set by Group Policy is used. Windows Update is also used for online images. </maml:para>
          <maml:para>Source can only be used when servicing an image with Windows 8 or Windows Server 2012 or a later version.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Enable an optional feature in the running operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Enable-WindowsOptionalFeature –Online –FeatureName "Hearts" -All
</dev:code>
        <dev:remarks>
          <maml:para>This command enables the optional feature, Hearts, the parent feature for Hearts, and the dependencies for the parent feature in the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Enable an optional feature in a mounted operating system image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Enable-WindowsOptionalFeature –Path "c:\offline" –FeatureName "Calc" –PackageName "Microsoft.Windows.Calc.Demo~6595b6144ccf1df~x86~en~1.0.0.0"
</dev:code>
        <dev:remarks>
          <maml:para>This command enables the optional feature, Calc, in the specified package in the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Restore an optional feature</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Enable-WindowsOptionalFeature –Online –FeatureName "MyFeature" –Source "c:\test\mount" -LimitAccess
</dev:code>
        <dev:remarks>
          <maml:para>This command restores the optional feature, MyFeature, to the Windows image that is mounted to c:\offline using source files from another Windows image that is mounted to c:\test\mount. If the files are not found in the source image, this command specifies not to check Windows Update for the source files.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289353</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Disable-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Expand-WindowsCustomDataImage</command:name>
      <maml:description>
        <maml:para>Expands a custom data image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Expand</command:verb>
      <command:noun>WindowsCustomDataImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Expand-WindowsCustomDataImage cmdlet expands a custom data image. Single instance files apply to the operating system partition that is contained in a custom data image in the recovery folder on the device.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Expand-WindowsCustomDataImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CustomDataImage</maml:name>
          <maml:description>
            <maml:para>Specifies the custom data of a Windows image captured in a WIM container.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SingleInstance</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet changes the custom data files applied on the operating system partition to file pointers backed up by the file payloads in the custom data image.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>CustomDataImage</maml:name>
        <maml:description>
          <maml:para>Specifies the custom data of a Windows image captured in a WIM container.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SingleInstance</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet changes the custom data files applied on the operating system partition to file pointers backed up by the file payloads in the custom data image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[], Microsoft.Dism.Commands.ImageObject, Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Expand a custom data image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Expand-WindowsCustomDataImage -CustomDataImage "C:\oem.ppkg" -ImagePath "C:\" -SingleInstance
</dev:code>
        <dev:remarks>
          <maml:para>This command expands the custom data image C:\oem.ppkg to the specified image path. This command specifies the SingleInstance parameter.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Expand-WindowsImage</command:name>
      <maml:description>
        <maml:para>Applies an image to a specified location.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Expand</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Expand-WindowsImage cmdlet applies an image to a specified location. </maml:para>
      <maml:para>This cmdlet does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Expand-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Compact</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet applies the operating system image to the specified drive with individual operating system files compressed. If you do not specify this parameter, this cmdlet lays down all of the files in the image without compression. </maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ConfirmTrustedFile</maml:name>
          <maml:description>
            <maml:para>Specifies that this cmdlet validates the image for Trusted Desktop on a Windows® 8 or Windows® 8.1. This option can only be run on a computer running at least Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRpFix</maml:name>
          <maml:description>
            <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SplitImageFilePattern</maml:name>
          <maml:description>
            <maml:para>Specifies the location and name of the base split image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Verify</maml:name>
          <maml:description>
            <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the offline image to be added will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ApplyPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location where the image is to be applied.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Index</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Expand-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Compact</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet applies the operating system image to the specified drive with individual operating system files compressed. If you do not specify this parameter, this cmdlet lays down all of the files in the image without compression. </maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ConfirmTrustedFile</maml:name>
          <maml:description>
            <maml:para>Specifies that this cmdlet validates the image for Trusted Desktop on a Windows® 8 or Windows® 8.1. This option can only be run on a computer running at least Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRpFix</maml:name>
          <maml:description>
            <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SplitImageFilePattern</maml:name>
          <maml:description>
            <maml:para>Specifies the location and name of the base split image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Verify</maml:name>
          <maml:description>
            <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the offline image to be added will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ApplyPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location where the image is to be applied.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ApplyPath</maml:name>
        <maml:description>
          <maml:para>Specifies the location where the image is to be applied.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Compact</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet applies the operating system image to the specified drive with individual operating system files compressed. If you do not specify this parameter, this cmdlet lays down all of the files in the image without compression. </maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ConfirmTrustedFile</maml:name>
        <maml:description>
          <maml:para>Specifies that this cmdlet validates the image for Trusted Desktop on a Windows® 8 or Windows® 8.1. This option can only be run on a computer running at least Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Index</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRpFix</maml:name>
        <maml:description>
          <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SplitImageFilePattern</maml:name>
        <maml:description>
          <maml:para>Specifies the location and name of the base split image file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Verify</maml:name>
        <maml:description>
          <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WIMBoot</maml:name>
        <maml:description>
          <maml:para>Specifies that the offline image to be added will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Apply an image in a file to a partion</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Expand-WindowsImage -ImagePath "c:\imagestore\custom.wim" -ApplyPath "d:\" -Index 1

</dev:code>
        <dev:remarks>
          <maml:para>This command applies an image at index 1 in the c:\imagestore\custom.wim file to partition d:.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Apply a split image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Expand-WindowsImage -ImagePath "c:\imagestore\split\custom.swm" -SplitImageFilePattern "c:\imagestore\split\custom*.swm" -ApplyPath "d:\" -Name "Windows Pro" -Verify

</dev:code>
        <dev:remarks>
          <maml:para>This command applies the split image with a name that matches c:\imagestore\split\custom*.swm with a name of Windows Pro to partition d:. Check for errors and file duplication while applying the image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273948</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-WindowsDriver</command:name>
      <maml:description>
        <maml:para>Exports all third-party drivers from a Windows image to a destination folder.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Export</command:verb>
      <command:noun>WindowsDriver</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Export-WindowsDriver cmdlet exports all third-party drivers from a Windows image to a destination folder.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies a directory the exported third-party drivers will be stored.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Destination</maml:name>
          <maml:description>
            <maml:para>Specifies a directory the exported third-party drivers will be stored.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Destination</maml:name>
        <maml:description>
          <maml:para>Specifies a directory the exported third-party drivers will be stored.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[], Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Export drivers from the running operationg system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Export-WindowsDriver -Online -Destination d:\drivers

</dev:code>
        <dev:remarks>
          <maml:para>This command exports third-party drivers from the running version of Windows.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Export drivers from an offline image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Export-WindowsDriver -Path c:\offline-image -Destination d:\drivers

</dev:code>
        <dev:remarks>
          <maml:para>This command exports third-party drivers from an offline image mounted at c:\offline-image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=325581</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-WindowsImage</command:name>
      <maml:description>
        <maml:para>Exports a copy of the specified image to another image file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Export</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Export-WindowsImage cmdlet exports a copy of the specified image to another image file. The source and destination files must use the same compression type. </maml:para>
      <maml:para>You can also optimize an image by exporting to a new image file with Export-WindowsImage. When you modify an image, DISM stores additional resource files that increase the overall size of the image. Exporting the image will remove unnecessary resource files. </maml:para>
      <maml:para>This cmdlet does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CompressionType</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_compression_type</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DN">
          <maml:name>DestinationName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the exported image in the exported image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SB">
          <maml:name>Setbootable</maml:name>
          <maml:description>
            <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SplitImageFilePattern</maml:name>
          <maml:description>
            <maml:para>Specifies the location and name of the base split image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the image will be formatted to install on a Windows image file boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DIP">
          <maml:name>DestinationImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the exported image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SIP">
          <maml:name>SourceImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the source image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SI">
          <maml:name>SourceIndex</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CompressionType</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_compression_type</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DN">
          <maml:name>DestinationName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the exported image in the exported image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SB">
          <maml:name>Setbootable</maml:name>
          <maml:description>
            <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SplitImageFilePattern</maml:name>
          <maml:description>
            <maml:para>Specifies the location and name of the base split image file.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the image will be formatted to install on a Windows image file boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DIP">
          <maml:name>DestinationImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the exported image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SIP">
          <maml:name>SourceImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the source image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SN">
          <maml:name>SourceName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the source image in the source image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CompressionType</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_compression_type</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DIP">
        <maml:name>DestinationImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the exported image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="DN">
        <maml:name>DestinationName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the exported image in the exported image file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SB">
        <maml:name>Setbootable</maml:name>
        <maml:description>
          <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SIP">
        <maml:name>SourceImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the source image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SI">
        <maml:name>SourceIndex</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SN">
        <maml:name>SourceName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the source image in the source image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SplitImageFilePattern</maml:name>
        <maml:description>
          <maml:para>Specifies the location and name of the base split image file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WIMBoot</maml:name>
        <maml:description>
          <maml:para>Specifies that the image will be formatted to install on a Windows image file boot (WIMBoot) system.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Export an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Export-WindowsImage -SourceImagePath C:\imagestore\custom.wim -SourceIndex 1 -DestinationImagePath c:\imagestore\export.wim -DestinationName "Exported Image"

</dev:code>
        <dev:remarks>
          <maml:para>This command exports the image at Index 1 of the file C:\imagestore\custom.wim to the file c:\imagestore\export.wim with the name Exported Image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273949</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-AppxProvisionedPackage</command:name>
      <maml:description>
        <maml:para>Gets information about app packages (.appx) in an image that will be installed for each new user.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>AppxProvisionedPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-AppxProvisionedPackage cmdlet gets information about app packages (.appx) in an image that are set to install for each new user. For information about app packages (.appx) that are not provisioned, use the Get-AppxPackage cmdlet instead. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AppxPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: List the app packages the mounted image to install for eachaccount</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-AppxProvisionedPackage –Path "c:\offline"
</dev:code>
        <dev:remarks>
          <maml:para>This command lists the app packages (.appx) in the Windows image that is mounted to c:\offline that will be installed for each new user account.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289354</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxPackage</maml:linkText>
        <maml:uri>
        </maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-AppXProvisionedDataFile</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WIMBootEntry</command:name>
      <maml:description>
        <maml:para>Displays the Windows image file boot (WIMBoot) configuration entries for a specified disk volume.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WIMBootEntry</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WIMBootEntry cmdlet displays the Windows image file boot (WIMBoot) configuration entries for a specified disk volume.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WIMBootEntry</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the disk volume of the Windows image file boot (WIMBoot) configuration.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the disk volume of the Windows image file boot (WIMBoot) configuration.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>
          </maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.WimBootEntryObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Displays the WIMBoot configuration for a drive</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WIMBootEntry -Path "C:\"

</dev:code>
        <dev:remarks>
          <maml:para>This command displays the Windows image file boot (WIMBoot) configuration entries for the C:\ drive.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>
        </maml:uri>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsCapability</command:name>
      <maml:description>
        <maml:para>Gets Windows capabilities for an image or a running operating system.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsCapability</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsCapability cmdlet gets Windows capabilities installed in an image or running operating system, or available for installation from a remote source.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability in an operating system image to get. </maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability in an operating system image to get. </maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet operates on a running operating system on the local host. </maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the identity of the capability in an operating system image to get. </maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Indicates that the cmdlet operates on a running operating system on the local host. </maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>
          </maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Get the Windows capabilities for an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsCapability -Path "C:\offline" -Name "Language.TextToSpeech~~~fr-FR~0.0.1.0" 
</dev:code>
        <dev:remarks>
          <maml:para>This command gets the Windows capabilities installed in the operating system image specified by the Name parameter at the path C:\offline. </maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Get the Windows capabilities for the local operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsCapability -Online 
</dev:code>
        <dev:remarks>
          <maml:para>This command gets the Windows capabilities installed on the local host.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsDriver</command:name>
      <maml:description>
        <maml:para>Displays information about drivers in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsDriver</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsDriver cmdlet displays information about driver packages in the online or offline Windows image. You can display basic information about all of the drivers in an image, or display detailed information about a specific driver.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Displays information about default drivers. If you do not specify this parameter, only third-party drivers and listed.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Driver</maml:name>
          <maml:description>
            <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want detailed information about. When you specify a folder, .inf files that are not valid driver packages are ignored.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Displays information about default drivers. If you do not specify this parameter, only third-party drivers and listed.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Driver</maml:name>
          <maml:description>
            <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want detailed information about. When you specify a folder, .inf files that are not valid driver packages are ignored.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Displays information about default drivers. If you do not specify this parameter, only third-party drivers and listed.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Driver</maml:name>
        <maml:description>
          <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want detailed information about. When you specify a folder, .inf files that are not valid driver packages are ignored.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Gets all drivers in an online image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsDriver –Online -All
</dev:code>
        <dev:remarks>
          <maml:para>This command gets all of the drivers in an online Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Gets third-party drivers in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsDriver –Path "c:\offline"
</dev:code>
        <dev:remarks>
          <maml:para>This command gets the third-party drivers in a mounted Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Get details about a driver in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsDriver –Path "c:\offline" –Driver "OEM1.inf"
</dev:code>
        <dev:remarks>
          <maml:para>This command gets detailed information about the OEM1.inf driver in a mounted Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 4: Get details about a driver in a specified location in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsDriver –Path "c:\offline" –Driver "c:\drivers\Usb\Usb.inf"
</dev:code>
        <dev:remarks>
          <maml:para>This command gets detailed information about the Usb.inf driver in a mounted Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289355</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsEdition</command:name>
      <maml:description>
        <maml:para>Gets edition information about a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsEdition</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsEdition cmdlet gets the current editions of the specified Windows image. </maml:para>
      <maml:para>The Target parameter gets the target editions available in the specified Windows image. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsEdition</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Target</maml:name>
          <maml:description>
            <maml:para>Displays a list of Windows editions that an image can be changed to.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsEdition</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Target</maml:name>
          <maml:description>
            <maml:para>Displays a list of Windows editions that an image can be changed to.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Target</maml:name>
        <maml:description>
          <maml:para>Displays a list of Windows editions that an image can be changed to.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.EditionObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Display the current edition of the operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsEdition –Online
</dev:code>
        <dev:remarks>
          <maml:para>This command displays the name of the current edition of the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Display the target editions for a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsEdition –Path "c:\offline" -Target
</dev:code>
        <dev:remarks>
          <maml:para>This command displays the names of the available target editions that the mounted Windows image at c:\offline can be changed to.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289356</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WindowsEdition</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WindowsProductKey</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsImage</command:name>
      <maml:description>
        <maml:para>Gets information about a Windows image in a WIM or VHD file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsImage cmdlet gets information about a Windows image in a WIM or VHD file. </maml:para>
      <maml:para>Use the Mounted parameter to get information about any Windows images that are mapped to directories on the local computer.</maml:para>
      <maml:para>Use the ImagePath parameter to get information about images in a specific WIM or VHD file.</maml:para>
      <maml:para>Use the Index or Name parameter to get detailed information about a specific image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM or VHD file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM or VHD file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM or VHD file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM or VHD file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Index</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mounted</maml:name>
          <maml:description>
            <maml:para>Gets information, including the mount path, for all images mapped to a directories on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM or VHD file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Index</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Mounted</maml:name>
        <maml:description>
          <maml:para>Gets information, including the mount path, for all images mapped to a directories on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM or VHD file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.MountedImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.WimImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Get information about all mounted images</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsImage -Mounted
</dev:code>
        <dev:remarks>
          <maml:para>This command gets information, including mount path, about all of the Windows images mounted on the local computer.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Get information about a specific mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsImage –ImagePath "c:\imagestore\install.wim" –Name Ultimate
</dev:code>
        <dev:remarks>
          <maml:para>This command gets detailed information about the Windows image named “Ultimate” in the install.wim file at c:\imagestore.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Get information about a specific image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsImage –ImagePath "c:\imagestore\install.vhd"
</dev:code>
        <dev:remarks>
          <maml:para>This command gets basic information about the Windows image in the install.vhd file at c:\imagestore.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289357</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsImageContent</command:name>
      <maml:description>
        <maml:para>Displays a list of the files and folders in a specified image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsImageContent</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsImageContent cmdlet displays a list of the files and folders in a specified image. </maml:para>
      <maml:para>This cmdlet does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsImageContent</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Index</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsImageContent</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Index</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: List files and folders for an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsImageContent -ImagePath "c:\imagestore\install.wim" -Index 1

</dev:code>
        <dev:remarks>
          <maml:para>This command lists the files and folders in the first image in c:\imagestore\install.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: List files and folders for a named image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsImageContent -ImagePath "c:\imagestore\install.wim" -Name "Windows Pro"

</dev:code>
        <dev:remarks>
          <maml:para>This command lists the files and folders in the image named Windows Pro that is located in c:\imagestore\install.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273950</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsOptionalFeature</command:name>
      <maml:description>
        <maml:para>Gets information about optional features in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsOptionalFeature</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsOptionalFeature cmdlet gets information about all features (operating system features that include optional Windows foundation features) in the Windows Foundation Package or a specified package in the Windows image. </maml:para>
      <maml:para>Use the PackageName or PackagePath parameter to get information about all features in a specific package in the Windows image. </maml:para>
      <maml:para>The FeatureName parameter gets more detailed information about a specific feature in the Windows image. If the feature is not a part of the Windows Foundation package, either a PackageName or PackagePath parameter must be used to specify the parent package of the feature. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a feature to get detailed information about. Feature names are case sensitive if you are servicing a Windows image other than Windows 8.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get all of the features in the package. Use the FeatureName and PackageName parameters to get more detailed information about a specific feature in the package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get all of the features in the package. Use the FeatureName and PackagePath parameters to get more detailed information about a specific feature in the package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsOptionalFeature</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>FeatureName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a feature to get detailed information about. Feature names are case sensitive if you are servicing a Windows image other than Windows 8.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get all of the features in the package. Use the FeatureName and PackageName parameters to get more detailed information about a specific feature in the package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get all of the features in the package. Use the FeatureName and PackagePath parameters to get more detailed information about a specific feature in the package.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>FeatureName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of a feature to get detailed information about. Feature names are case sensitive if you are servicing a Windows image other than Windows 8.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get all of the features in the package. Use the FeatureName and PackageName parameters to get more detailed information about a specific feature in the package.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get all of the features in the package. Use the FeatureName and PackagePath parameters to get more detailed information about a specific feature in the package.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedFeatureObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Lists optional features in the running operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsOptionalFeature –Online
</dev:code>
        <dev:remarks>
          <maml:para>This command lists all of the optional features in the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Lists optional features in a package in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsOptionalFeature –Path "c:\offline" –PackageName "Microsoft-Windows-Backup-Package~31bf3856ad364e35~x86~~6.1.7601.16525"
</dev:code>
        <dev:remarks>
          <maml:para>This command displays lists all of the optional features in the specified package in the Windows image mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Get details about a feature in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsOptionalFeature –Path "c:\offline" –FeatureName Hearts
</dev:code>
        <dev:remarks>
          <maml:para>This command displays detailed information about the feature, Hearts, in the Windows Foundation Package in the Windows image mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 4: Gets details about a feature in a specified package in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsOptionalFeature –Path "c:\offline" –FeatureName "MyFeature" –PackagePath "c:\packages\package.cab"
</dev:code>
        <dev:remarks>
          <maml:para>This command displays detailed information about the feature, MyFeature, in the package at c:\package\package.cab in the Windows image mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289358</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Enable-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WindowsPackage</command:name>
      <maml:description>
        <maml:para>Gets information about packages in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Get</command:verb>
      <command:noun>WindowsPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Get-WindowsPackage cmdlet gets information about all packages in a Windows image or about a specific package that is provided as a .cab file. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
      <maml:para>Use either the PackageName or PackagePath parameter to get more detailed information about a specific package in the Windows image such as whether the package can be installed completely offline without booting the image. </maml:para>
      <maml:para>You cannot use this command to obtain detailed package information for .msu files, only .cab files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of a package as it is listed in the Windows image. Use the PackageName parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a .cab file in the Windows image. Use the PackagePath parameter to get more detailed information about a specific package in the Windows image, such as whether the package can be installed completely offline without booting the image.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Lists packages in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsPackage –Path "c:\offline"
</dev:code>
        <dev:remarks>
          <maml:para>This command lists all of the packages in the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Lists details about a package in a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Get-WindowsPackage –Path "c:\offline" –PackageName "Microsoft-Windows-Backup-Package~31bf3856ad364e35~x86~~6.1.7601.16525"
</dev:code>
        <dev:remarks>
          <maml:para>This command displays detailed information about the specified package in the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289359</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Mount-WindowsImage</command:name>
      <maml:description>
        <maml:para>Mounts a Windows image in a WIM or VHD file to a directory on the local computer.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Mount</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Mount-WindowsImage cmdlet maps a Windows image in a WIM or VHD file to the specified directory so that it is accessible for servicing. </maml:para>
      <maml:para>The Path parameter specifies the location where you want to mount the Windows image. </maml:para>
      <maml:para>The ImagePath parameter specifies the location of the WIM or VHD file containing the Windows image you want to mount. </maml:para>
      <maml:para>Use the Index or Name parameter to specify which image in a WIM or VHD file that you want to mount. For a VHD file, the Index must be 1. </maml:para>
      <maml:para>The Optimize parameter reduces the amount of time it takes to initially mount the image. However, processes that are ordinarily performed during a mount will instead be completed the first time that you access a directory. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the Optimize parameter. </maml:para>
      <maml:para>The Remount parameter mounts an image in a WIM or VHD file that was already mounted at the specified Path, but has become inaccessible for servicing. </maml:para>
      <maml:para>The CheckIntegrity parameter detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. </maml:para>
      <maml:para>The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Mount-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Dismount-WindowsImage or Save-WindowsImage cmdlet.  CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Optimize</maml:name>
          <maml:description>
            <maml:para>Reduces the amount of time it takes to initially mount the image. However, processes that are ordinarily performed during a mount will instead be completed the first time that you access a directory. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the Optimize parameter.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ReadOnly</maml:name>
          <maml:description>
            <maml:para>Specifies that the image should be mounted with read-only permissions.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the WIM or VHD file containing the Windows image you want to mount.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Index</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the location on your local computer where you want to mount the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Mount-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Dismount-WindowsImage or Save-WindowsImage cmdlet.  CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Optimize</maml:name>
          <maml:description>
            <maml:para>Reduces the amount of time it takes to initially mount the image. However, processes that are ordinarily performed during a mount will instead be completed the first time that you access a directory. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the Optimize parameter.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ReadOnly</maml:name>
          <maml:description>
            <maml:para>Specifies that the image should be mounted with read-only permissions.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the WIM or VHD file containing the Windows image you want to mount.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM or VHD file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the location on your local computer where you want to mount the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Mount-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the location on your local computer where you want to mount the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Remount</maml:name>
          <maml:description>
            <maml:para>Mounts an image in a WIM or VHD file that was already mounted at the specified Path, but has become inaccessible for servicing.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Dismount-WindowsImage or Save-WindowsImage cmdlet.  CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the WIM or VHD file containing the Windows image you want to mount.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Index</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM or VHD file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Optimize</maml:name>
        <maml:description>
          <maml:para>Reduces the amount of time it takes to initially mount the image. However, processes that are ordinarily performed during a mount will instead be completed the first time that you access a directory. As a result, there may be an increase in the time that is required to access a directory for the first time after mounting an image using the Optimize parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the location on your local computer where you want to mount the Windows image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ReadOnly</maml:name>
        <maml:description>
          <maml:para>Specifies that the image should be mounted with read-only permissions.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Remount</maml:name>
        <maml:description>
          <maml:para>Mounts an image in a WIM or VHD file that was already mounted at the specified Path, but has become inaccessible for servicing.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Mount an image from the install.vhd file to a directory</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Mount-WindowsImage –ImagePath "c:\imagestore\install.vhd" –Index 1 –Path "c:\offline"
</dev:code>
        <dev:remarks>
          <maml:para>This command mounts the Windows image contained in the install.vhd file to the c:\offline directory.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Mount an image at an index of a file with read-only privileges</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Mount-WindowsImage –ImagePath "c:\imagestore\install.wim" –Index 2 -Path "c:\offline" –ReadOnly
</dev:code>
        <dev:remarks>
          <maml:para>This command mounts the Windows image at index 2 of the install.wim file to the c:\offline ddirectory with read-only privileges.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Mount an image at an index of a file </maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Mount-WindowsImage –ImagePath "c:\imagestore\install.wim" –Index 2 -Path "c:\offline" –Optimize
</dev:code>
        <dev:remarks>
          <maml:para>This command mounts the Windows image at index 2 of the install.wim file to the c:\offline directory with a quicker initial mount time. Additional operations may be slower.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 4: Remounts an image previously mounted to a directory that is inaccessible</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Mount-WindowsImage –Path "c:\offline" -Remount
</dev:code>
        <dev:remarks>
          <maml:para>This command remounts a Windows image that has already been mounted to the c:\offline directory but has become inaccessible for servicing.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289360</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>New-WindowsCustomImage</command:name>
      <maml:description>
        <maml:para>Captures an image of customized or serviced Windows components on a Windows Image File Boot (WIMBoot) configured device.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>New</command:verb>
      <command:noun>WindowsCustomImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The New-WindowsCustomImage cmdlet captures image customizations into a new WIM file on a Windows Image File Boot (WIMBoot) system.</maml:para>
      <maml:para>Captured directories include all subfolders and data.</maml:para>
      <maml:para>You cannot capture an empty directory.</maml:para>
      <maml:para>Note: This command only captures customization files.</maml:para>
      <maml:para>The command cannot be used to capture installation files into a new WIM.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-WindowsCustomImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ConfigFilePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a configuration file that lists exclusions for image capture and compress commands. For more information, see DISM Configuration List and WimScrit.ini Files, http://go.microsoft.com/fwlink/?LinkID=313768.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Verify</maml:name>
          <maml:description>
            <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CapturePath</maml:name>
          <maml:description>
            <maml:para>Specifies the drive or path to the Windows operating system that is to be captured to an image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CapturePath</maml:name>
        <maml:description>
          <maml:para>Specifies the drive or path to the Windows operating system that is to be captured to an image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ConfigFilePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a configuration file that lists exclusions for image capture and compress commands. For more information, see DISM Configuration List and WimScrit.ini Files, http://go.microsoft.com/fwlink/?LinkID=313768.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Verify</maml:name>
        <maml:description>
          <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>none</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Capture image customization files</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;New-WindowsCustomImage -CapturePath "c:\"

</dev:code>
        <dev:remarks>
          <maml:para>This command captures image customization files in a WIM and saves the files on the c:\ directory.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=331576</maml:uri>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>New-WindowsImage</command:name>
      <maml:description>
        <maml:para>Captures an image of a drive to a new WIM file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>New</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The New-WindowsImage cmdlet captures an image of a drive to a new WIM file. Captured directories include all subfolders and data. You cannot capture an empty directory. A directory must contain at least one file. </maml:para>
      <maml:para>This cmdlet does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CompressionType</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_compression_type</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ConfigFilePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a configuration file that lists exclusions for image capture commands and compress commands. For more information, see DISM Configuration List and WimScript.ini Files, <maml:navigationLink><maml:linkText>http://go.microsoft.com/fwlink/?LinkID=313768</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkID=313768) in the TechNet Library.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Description</maml:name>
          <maml:description>
            <maml:para>Specifies the description of the image to be captured.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRpFix</maml:name>
          <maml:description>
            <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SB">
          <maml:name>Setbootable</maml:name>
          <maml:description>
            <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Verify</maml:name>
          <maml:description>
            <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WIMBoot</maml:name>
          <maml:description>
            <maml:para>Specifies that the image will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CapturePath</maml:name>
          <maml:description>
            <maml:para>Specifies the drive or path to the Windows operating system that is to be captured to an image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CapturePath</maml:name>
        <maml:description>
          <maml:para>Specifies the drive or path to the Windows operating system that is to be captured to an image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CompressionType</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_compression_type</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ConfigFilePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a configuration file that lists exclusions for image capture commands and compress commands. For more information, see DISM Configuration List and WimScript.ini Files, <maml:navigationLink><maml:linkText>http://go.microsoft.com/fwlink/?LinkID=313768</maml:linkText><maml:uri></maml:uri></maml:navigationLink> (http://go.microsoft.com/fwlink/?LinkID=313768) in the TechNet Library.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Description</maml:name>
        <maml:description>
          <maml:para>Specifies the description of the image to be captured.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRpFix</maml:name>
        <maml:description>
          <maml:para>Disables the reparse point tag fix. A reparse point is a file that contains a link to another file on the file system. If the parameter is not specified, reparse points that resolve to paths outside of the value specified by the ImagePath parameter will not be captured.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="SB">
        <maml:name>Setbootable</maml:name>
        <maml:description>
          <maml:para>Marks a volume image as being a bootable image. This argument is available only for Windows PE images. Only one volume image can be marked as bootable in a .wim file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Verify</maml:name>
        <maml:description>
          <maml:para>Checks for errors and file duplication. 
 During an apply operation, for example, using the Add-WindowsImage cmdlet, the size and the hash of the file being applied are checked against the image file to verify they are both equal. 
 During a capture operation, for example, when using the New-WindowsImage cmdlet, after the files is captured into a Windows image, the file is written to a temporary file and compared on a bit-by-bit basis with the original file.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WIMBoot</maml:name>
        <maml:description>
          <maml:para>Specifies that the image will be formatted to install on a Windows Image Format Boot (WIMBoot) system.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Capture an image of a drive for a WIM file</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;New-WindowsImage -ImagePath "c:\imagestore\custom.wim" -CapturePath "d:\" -Name "Drive D"

</dev:code>
        <dev:remarks>
          <maml:para>This command captures the Drive D image in the WIM file located on d:\ and save to the file c:\imagestore\custom.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273951</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Optimize-WindowsImage</command:name>
      <maml:description>
        <maml:para>Configures a Windows image with specified optimizations.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Optimize</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Optimize-WindowsImage cmdlet performs specified configurations to an offline image. </maml:para>
      <maml:para>Optimize-WindowsImage only applies to Windows 8.1 Update images that have been captured or exported as a Windows image file boot (WIMBoot) file. Only use Optimize-WindowsImage with images that will be used for WIMBoot supported systems. If Optimize-WindowsImage is used with a non-WIMBoot supported system image, Windows may not work as expected, after installation on a non-WIMBoot supported device.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Optimize-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>OptimizationTarget</maml:name>
          <maml:description>
            <maml:para>Specifies the Windows image optimization type. The accepted values are as follows: "WIMBoot". Note: This value must be entered as a string value.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>OptimizationTarget</maml:name>
        <maml:description>
          <maml:para>Specifies the Windows image optimization type. The accepted values are as follows: "WIMBoot". Note: This value must be entered as a string value.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Configure an image as a WIMBoot system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Optimize-WindowsImage -Path "c:\" -OptimizationTarget "WIMBoot"

</dev:code>
        <dev:remarks>
          <maml:para>This command configures the Windows image located in the c:\ directory as a WIMBoot system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=389089</maml:uri>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-AppxProvisionedPackage</command:name>
      <maml:description>
        <maml:para>Removes an app package (.appx) from a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Remove</command:verb>
      <command:noun>AppxProvisionedPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Remove-AppxProvisionedPackage cmdlet removes app packages (.appx) from a Windows image. App packages will not be installed when new user accounts are created. Packages will not be removed from existing user accounts. To remove app packages (.appx) that are not provisioned or to remove a package for a particular user only, use Remove-AppxPackage instead.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the app package (.appx) to remove from the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-AppxProvisionedPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the app package (.appx) to remove from the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the app package (.appx) to remove from the Windows image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AppxPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Remove an app package from an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-AppxProvisionedPackage –Path c:\offline –PackageName MyAppxPkg
</dev:code>
        <dev:remarks>
          <maml:para>This command removes the app package (.appx), MyAppxPkg, from the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289361</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxPackage</maml:linkText>
        <maml:uri>
        </maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-AppXProvisionedDataFile</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-WindowsCapability</command:name>
      <maml:description>
        <maml:para>Uninstalls a Windows capability package from an image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Remove</command:verb>
      <command:noun>WindowsCapability</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Remove-WindowsCapability cmdlet uninstalls a Windows capability package from the specified image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability to remove from an operating system image. </maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Indicates that the cmdlet operates on a running operating system on the local host.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-WindowsCapability</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the identity of the capability to remove from an operating system image. </maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the identity of the capability to remove from an operating system image. </maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Indicates that the cmdlet operates on a running operating system on the local host.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>
          </maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Remove Windows capabilities for an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsCapability -Name "Language.TextToSpeech~~~fr-FR~0.0.1.0" -Path "C:\offline" 
</dev:code>
        <dev:remarks>
          <maml:para>This command uninstalls the Windows capabilities installed in the operating system image specified by the Name parameter at the path C:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Remove Windows capabilities for the local operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsCapability -Name "Language.TextToSpeech~~~fr-FR~0.0.1.0" -Online
</dev:code>
        <dev:remarks>
          <maml:para>This command uninstalls the Windows capabilities installed on the local host.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsCapability</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-WindowsDriver</command:name>
      <maml:description>
        <maml:para>Removes a driver from an offline Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Remove</command:verb>
      <command:noun>WindowsDriver</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Remove-WindowsDriver cmdlet removes third-party driver packages from an offline Windows image.</maml:para>
      <maml:para>Caution: Removing a boot-critical driver package can make the offline Windows image unbootable.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-WindowsDriver</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Driver</maml:name>
          <maml:description>
            <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want to add. When third-party drivers are added to an image, they are named OEM0.inf, OEM1.inf, and so on. You must specify the published name (for example, OEM1.inf) to remove the driver. You cannot remove default drivers.</maml:para>
            <maml:para>When you specify a folder, .inf files that are not valid driver packages are ignored.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Driver</maml:name>
        <maml:description>
          <maml:para>Specifies the .inf file or folder containing the .inf files of the drivers you want to add. When third-party drivers are added to an image, they are named OEM0.inf, OEM1.inf, and so on. You must specify the published name (for example, OEM1.inf) to remove the driver. You cannot remove default drivers.</maml:para>
          <maml:para>When you specify a folder, .inf files that are not valid driver packages are ignored.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedDriverObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Remove a driver from an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsDriver –Path "c:\offline" –Driver "OEM1.inf"
</dev:code>
        <dev:remarks>
          <maml:para>This command removes the OEM1.inf driver from a mounted Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289362</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsDriver</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-WindowsImage</command:name>
      <maml:description>
        <maml:para>Deletes the specified volume image from a WIM file that has multiple volume images.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Remove</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Remove-WindowsImage cmdlet deletes the specified volume image from a WIM file that has multiple volume images. This cmdlet deletes only the metadata entries and XML entries. It does not delete the stream data and does not optimize the WIM file. </maml:para>
      <maml:para>This command-line option does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Index</maml:name>
          <maml:description>
            <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specifies the name of an image in a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Index</maml:name>
        <maml:description>
          <maml:para>Specifies the index number of a Windows image in a WIM or VHD file. For a VHD file, the Index must be 1.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt32</command:parameterValue>
        <dev:type>
          <maml:name>UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specifies the name of an image in a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Remove the first image from a WIM file</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsImage -ImagePath "c:\imagestore\custom.wim" -Index 1 -CheckIntegrity

</dev:code>
        <dev:remarks>
          <maml:para>This command removes the first image in c:\imagestore\custom.wim. </maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Remove an image from a WIM file by name</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsImage -ImagePath "c:\imagestore\custom.wim" -Name "Starter" -CheckIntegrity
</dev:code>
        <dev:remarks>
          <maml:para>This command removes the image named Starter that is located in c:\imagestore\custom.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273952</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Split-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-WindowsPackage</command:name>
      <maml:description>
        <maml:para>Removes a package from a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Remove</command:verb>
      <command:noun>WindowsPackage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Remove-WindowsPackage cmdlet removes a specified .cab file package from the image. Only .cab files can be specified. You cannot use this command to remove .msu files. </maml:para>
      <maml:para>Using this command to remove a package from an offline image will not reduce the image size.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagepath</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Remove-WindowsPackage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>PackagePath</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagepath</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_packagename</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>PackagePath</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_packagepath</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BasicPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AdvancedPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Remove a package from a running operating system image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsPackage –Online –PackageName "Microsoft-Windows-Backup-Package~31bf3856ad364e35~x86~~6.1.7601.16525"
</dev:code>
        <dev:remarks>
          <maml:para>This command removes the specified package from the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Remove a package from a mounted operating system image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Remove-WindowsPackage –Path "c:\offline" –PackagePath "c:\packages\package.cab"
</dev:code>
        <dev:remarks>
          <maml:para>This command removes the package at c:\packages\package.cab from the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289363</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Disable-WindowsOptionalFeature</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Repair-WindowsImage</command:name>
      <maml:description>
        <maml:para>Repairs a Windows image in a WIM or VHD file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Repair</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Repair-WindowsImage cmdlet repairs a Windows image in a WIM or VHD file. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image. </maml:para>
      <maml:para>The LimitAccess parameter prevents access to Windows Update (WU) as a Source for repairing online images. </maml:para>
      <maml:para>The CheckHealth parameter checks whether the image has been flagged as corrupted by a failed process and whether the corruption can be repaired. </maml:para>
      <maml:para>The ScanHealth parameter scans the image for component store corruption. This operation will take several minutes.</maml:para>
      <maml:para>The RestoreHealth parameter scans the image for component store corruption, and then performs repair operations automatically. This operation will take several minutes.</maml:para>
      <maml:para>The Source parameter specifies the location of known good versions of files that can be used for the repair, such as a path to the root directory of a mounted image. </maml:para>
      <maml:para>CheckHealth, ScanHealth, RestoreHealth, Source, and LimitAccess can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Repair-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckHealth</maml:name>
          <maml:description>
            <maml:para>Checks whether the image has been flagged as corrupted by a failed process and whether the corruption can be repaired.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Prevents DISM from contacting Windows Update (WU) when searching for the source files to repair an online image. </maml:para>
            <maml:para>LimitAccess can only be used when servicing images that are running at least Windows® 8, Windows Server® 2012, or Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>RestoreHealth</maml:name>
          <maml:description>
            <maml:para>Scans the image for component store corruption, and then performs repair operations automatically. This operation will take several minutes.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScanHealth</maml:name>
          <maml:description>
            <maml:para>Scans the image for component store corruption. This operation will take several minutes.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to repair an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
            <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update (WU) is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Repair-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckHealth</maml:name>
          <maml:description>
            <maml:para>Checks whether the image has been flagged as corrupted by a failed process and whether the corruption can be repaired.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>LimitAccess</maml:name>
          <maml:description>
            <maml:para>Prevents DISM from contacting Windows Update (WU) when searching for the source files to repair an online image. </maml:para>
            <maml:para>LimitAccess can only be used when servicing images that are running at least Windows® 8, Windows Server® 2012, or Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>RestoreHealth</maml:name>
          <maml:description>
            <maml:para>Scans the image for component store corruption, and then performs repair operations automatically. This operation will take several minutes.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScanHealth</maml:name>
          <maml:description>
            <maml:para>Scans the image for component store corruption. This operation will take several minutes.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the files that are required to repair an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
            <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
            <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update (WU) is also used for online images. </maml:para>
            <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckHealth</maml:name>
        <maml:description>
          <maml:para>Checks whether the image has been flagged as corrupted by a failed process and whether the corruption can be repaired.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>LimitAccess</maml:name>
        <maml:description>
          <maml:para>Prevents DISM from contacting Windows Update (WU) when searching for the source files to repair an online image. </maml:para>
          <maml:para>LimitAccess can only be used when servicing images that are running at least Windows® 8, Windows Server® 2012, or Windows® Preinstallation Environment (Windows PE) 4.0.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>RestoreHealth</maml:name>
        <maml:description>
          <maml:para>Scans the image for component store corruption, and then performs repair operations automatically. This operation will take several minutes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScanHealth</maml:name>
        <maml:description>
          <maml:para>Scans the image for component store corruption. This operation will take several minutes.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the files that are required to repair an image. You can specify the Windows directory of a mounted image or a running Windows installation that is shared on the network. </maml:para>
          <maml:para>If you specify multiple Source arguments, the files are gathered from the first location where they are found and the rest of the locations are ignored. Separate source locations with a comma. </maml:para>
          <maml:para>If you do not specify a Source, the default location set by Group Policy is used. Windows Update (WU) is also used for online images. </maml:para>
          <maml:para>Source can only be used when servicing images that are running at least Windows® 8 or Windows Server® 2012.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="true">String[]</command:parameterValue>
        <dev:type>
          <maml:name>String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.MountedImageInfoObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Scan an image for corruption</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Repair-WindowsImage -Path "C:\offline\Mount" -ScanHealth
</dev:code>
        <dev:remarks>
          <maml:para>This command scans the specified image for component store corruption.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Check an image for corruption and whether to repair the image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Repair-WindowsImage -Path "C:\offline\Mount" -CheckHealth
</dev:code>
        <dev:remarks>
          <maml:para>This command checks whether the specified image has been flagged as corrupted by a failed process and whether the corruption can be repaired.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 3: Check an image for corruption and repairs the image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Repair-WindowsImage –Online -RestoreHealth -Source "C:\Mounted\VHD\Windows\WinSxS", "C:\Windows\TEMP" -LimitAccess
</dev:code>
        <dev:remarks>
          <maml:para>This command scans the specified image for component store corruption, and then performs repair operations automatically.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289364</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Save-WindowsImage</command:name>
      <maml:description>
        <maml:para>Applies changes made to a mounted image to its WIM or VHD file.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Save</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Save-WindowsImage cmdlet applies the servicing changes made to a mounted image to its WIM or VHD file without unmounting it. </maml:para>
      <maml:para>The Path parameter specifies the location of the mounted Windows image. </maml:para>
      <maml:para>The Append parameter specifies the location of an existing .wim file to add the Windows image to when you save it. </maml:para>
      <maml:para>The CheckIntegrity parameter detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Save-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Append</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet specifies the location of an existing .wim file to add the Windows image to when you save it.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Indicates that this cmdlet detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you want to save.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Append</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet specifies the location of an existing .wim file to add the Windows image to when you save it.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Indicates that this cmdlet detects and tracks .wim file corruption. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Mount-WindowsImage cmdlet. The CheckIntegrity parameter does not apply to virtual hard disk (VHD) files.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you want to save.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Save servicing changes made to a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Save-WindowsImage –Path "c:\offline"

</dev:code>
        <dev:remarks>
          <maml:para>This command saves the servicing changes made to the Windows image mounted to c:\offline. It does not unmounts the image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289365</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-AppXProvisionedDataFile</command:name>
      <maml:description>
        <maml:para>Adds custom data into the specified app (.appx) package that has been provisioned in a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Set</command:verb>
      <command:noun>AppXProvisionedDataFile</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Set-AppXProvisionedDataFile cmdlet adds custom data into the specified app (.appx) package that has been provisioned in a Windows image. The specified app (.appx) package must already be added to the image prior to adding custom data. </maml:para>
      <maml:para>You cannot install an app package (.appx) on an operating system that does not support apps for at least Windows® 8. Apps are not supported on Server Core installations of Windows Server, Windows PE, or on any versions of Windows older than Windows 8 and Windows Server 2012. </maml:para>
      <maml:para>To install and run apps on Windows Server, you must install the <maml:navigationLink><maml:linkText>Desktop Experience</maml:linkText><maml:uri></maml:uri></maml:navigationLink>. </maml:para>
      <maml:para>Use the Online parameter to specify the running operating system on your local computer, or use the Path parameter to specify the location of a mounted Windows image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-AppXProvisionedDataFile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CustomDataPath</maml:name>
          <maml:description>
            <maml:para>Specifies an optional custom data file for an app. You can specify any file name. The file will be renamed to Custom.dat when it is added to the image. If a Custom.dat file already exists, it will be overwritten.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Set-AppXProvisionedDataFile</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CustomDataPath</maml:name>
          <maml:description>
            <maml:para>Specifies an optional custom data file for an app. You can specify any file name. The file will be renamed to Custom.dat when it is added to the image. If a Custom.dat file already exists, it will be overwritten.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>PackageName</maml:name>
          <maml:description>
            <maml:para>dep_dism_ps_packagename</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CustomDataPath</maml:name>
        <maml:description>
          <maml:para>Specifies an optional custom data file for an app. You can specify any file name. The file will be renamed to Custom.dat when it is added to the image. If a Custom.dat file already exists, it will be overwritten.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>PackageName</maml:name>
        <maml:description>
          <maml:para>dep_dism_ps_packagename</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.AppxPackageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Add a custom data file to an app package for the running operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Set-AppXProvisionedDataFile -Online -PackageName "MyAppxPkg" -CustomDataPath "c:\Appx\myCustomData.dat"

</dev:code>
        <dev:remarks>
          <maml:para>This command adds the custom data file, c:\Appx\myCustomData.dat, into the app package, MyAppxPkg, that has been added to the running Windows operating system.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Add a custom data file to an app package for a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Set-AppxProvisionedDataFile -Path c:\offline -PackageName MyAppxPkg -CustomDataPath c:\Appx\myCustomData.dat
</dev:code>
        <dev:remarks>
          <maml:para>This command adds the custom data file, c:\Appx\myCustomData.dat, into the app package, MyAppxPkg, that has been added to the Windows image mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=293633</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-AppxProvisionedPackage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-WindowsEdition</command:name>
      <maml:description>
        <maml:para>Changes a Windows image to a higher edition.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Set</command:verb>
      <command:noun>WindowsEdition</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Set-WindowsEdition cmdlet changes a Windows image to a higher edition. Use Get-WindowsEdition with the Target parameter to find which editions are available in an image. </maml:para>
      <maml:para>You should not use the Set-WindowsEdition on an image that has already been changed to a higher edition. It is recommended that you use this option on the lowest edition available in the edition family. </maml:para>
      <maml:para>You can only change the edition on a running operating system for Windows Server images, not online Windows client images. The ProductKey parameter is required for changing online Server images.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-WindowsEdition</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Edition</maml:name>
          <maml:description>
            <maml:para>Specifies the target edition to change the Windows image to.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Edition</maml:name>
        <maml:description>
          <maml:para>Specifies the target edition to change the Windows image to.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.EditionObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Change the edition of an image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Set-WindowsEdition –Path "c:\offline" –Edition "Ultimate"

</dev:code>
        <dev:remarks>
          <maml:para>This command changes the edition of the Windows image that is mounted to c:\offline to Ultimate.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289366</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsEdition</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WindowsProductKey</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-WindowsProductKey</command:name>
      <maml:description>
        <maml:para>Sets the product key for the Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Set</command:verb>
      <command:noun>WindowsProductKey</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Set-WindowsProductKey cmdlet sets the product key for the current Windows Edition in the specified image.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-WindowsProductKey</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ProductKey</maml:name>
          <maml:description>
            <maml:para>Specifies the product key to use for the Windows image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ProductKey</maml:name>
        <maml:description>
          <maml:para>Specifies the product key to use for the Windows image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Set the product key on a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Set-WindowsProductKey –Path "c:\offline" –ProductKey "12345-12345-12345-12345-12345"
</dev:code>
        <dev:remarks>
          <maml:para>This command sets the product key on the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289367</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsEdition</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WindowsEdition</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Split-WindowsImage</command:name>
      <maml:description>
        <maml:para>Splits an existing .wim file into multiple read-only split .wim files.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Split</command:verb>
      <command:noun>WindowsImage</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Split-WindowsImage cmdlet creates the .swm files in the specified directory, naming each file the same as the specified path_to_swm, but with an appended number. For example, if you set path_to_swm as c:\Data.swm, this option creates a Data.swm file, a Data2.swm file, a Data3.swm file, and so on, defining each portion of the split .wim file and saving it to the C:\ directory. 

If a single file is larger than the value specified in the FileSize parameter, one of the split .swm files that results will be larger than the value specified in the FileSize parameter, in order to accommodate the large file. </maml:para>
      <maml:para>This cmdlet does not apply to virtual hard disk (VHD) files.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Split-WindowsImage</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>CheckIntegrity</maml:name>
          <maml:description>
            <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>FileSize</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum size in megabytes (MB) for each created .swm file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">UInt64</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of a WIM file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SplitImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the location and the base split image file name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>CheckIntegrity</maml:name>
        <maml:description>
          <maml:para>Detects and tracks .wim file corruption when used with the Add—WindowsImage, Dismount-WindowsImage or Save-WindowsImage cmdlet. CheckIntegrity stops the operation if DISM detects that the .wim file is corrupted when used with the Expand-WindowsImage or Mount-WindowsImage cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>FileSize</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum size in megabytes (MB) for each created .swm file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">UInt64</command:parameterValue>
        <dev:type>
          <maml:name>UInt64</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of a WIM file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SplitImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the location and the base split image file name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObjectWithState</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.OfflineImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Split a .wim file</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Split-WindowsImage -ImagePath "c:\imagestore\install.wim" -SplitImagePath "c:\imagestore\splitfiles\split.swm" -FileSize 1024 -CheckIntegrity

</dev:code>
        <dev:remarks>
          <maml:para>This command uses the image from c:\imagestore\install.wim to create a split.swm file, a split2.swm file, a split3.swm file, and so on, defining each portion of the split .wim file with a maximum size of 1024 MB and saving it to the C:\ imagestore\splitfiles\ directory.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=273953</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Add-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Dismount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Expand-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Export-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Mount-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>New-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Repair-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Save-WindowsImage</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Update-WIMBootEntry</command:name>
      <maml:description>
        <maml:para>Updates the Windows image file boot (WIMBoot) configuration entry, associated with either the specified data source ID, the renamed image file path or the moved image file path.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Update</command:verb>
      <command:noun>WIMBootEntry</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Update-WIMBootEntry cmdlet updates the Windows image file boot (WIMBoot) configuration entry, associated with either the specified data source ID, the renamed image file path or the moved image file path.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Update-WIMBootEntry</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>DataSourceID</maml:name>
          <maml:description>
            <maml:para>Specifies the data source ID. Use Get-WIMBootEntry to display the data source ID.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Int64</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>ImagePath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the renamed or moved image file.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the disk volume of the WIMBoot configuration.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>DataSourceID</maml:name>
        <maml:description>
          <maml:para>Specifies the data source ID. Use Get-WIMBootEntry to display the data source ID.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Int64</command:parameterValue>
        <dev:type>
          <maml:name>Int64</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>ImagePath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the renamed or moved image file.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true(ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the disk volume of the WIMBoot configuration.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>
          </maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.BaseDismObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
          <maml:para>
          </maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Update the configuration entry for a .wim file</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Update-WIMBootEntry -Path "C:\" -DataSourceID 0 -ImagePath "D:\Windows Images\install.wim"

</dev:code>
        <dev:remarks>
          <maml:para>This command updates the (WIMBoot) configuration entry for the data source ID to have a new image file path of D:\Windows Images\install.wim.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>
        </maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WIMBootEntry</maml:linkText>
        <maml:uri />
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Use-WindowsUnattend</command:name>
      <maml:description>
        <maml:para>Applies an unattended answer file to a Windows image.</maml:para>
      </maml:description>
      <maml:copyright>
        <maml:para />
      </maml:copyright>
      <command:verb>Use</command:verb>
      <command:noun>WindowsUnattend</command:noun>
      <dev:version />
    </command:details>
    <maml:description>
      <maml:para>The Use-WindowsUnattend cmdlet applies an unattended answer file (Unattend.xml) to a Windows image. </maml:para>
      <maml:para>If you are updating device drivers using an unattended answer file, you must apply the answer file to an offline image and specify the settings in the offlineServicing configuration pass. </maml:para>
      <maml:para>If you are updating packages or other settings using an unattended answer file, you can apply the answer file to an offline or online image. Specify the settings in the offlineServicing configuration pass.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Use-WindowsUnattend</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Online</maml:name>
          <maml:description>
            <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>UnattendPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the unattend.xml answer file to apply to the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Use-WindowsUnattend</maml:name>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
          <maml:name>LogLevel</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" variableLength="false">Errors</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">Warnings</command:parameterValue>
            <command:parameterValue required="false" variableLength="false">WarningsInfo</command:parameterValue>
          </command:parameterValueGroup>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
          <maml:name>LogPath</maml:name>
          <maml:description>
            <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>NoRestart</maml:name>
          <maml:description>
            <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
          </maml:description>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>ScratchDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SystemDrive</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>WindowsDirectory</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
          </maml:description>
          <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
        <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>UnattendPath</maml:name>
          <maml:description>
            <maml:para>Specifies the location of the unattend.xml answer file to apply to the image.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LL">
        <maml:name>LogLevel</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum output level shown in the logs. The default log level is 3. The accepted values are as follows:
1 = Errors only
2 = Errors and warnings
3 = Errors, warnings, and information
4 = All of the information listed previously, plus debug output</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">LogLevel</command:parameterValue>
        <dev:type>
          <maml:name>LogLevel</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="LP">
        <maml:name>LogPath</maml:name>
        <maml:description>
          <maml:para>Specifies the full path and file name to log to. If not set, the default is %WINDIR%\Logs\Dism\dism.log.
In Windows PE, the default directory is the RAMDISK scratch space which can be as low as 32 MB. The log file will automatically be archived. The archived log file will be saved with .bak appended to the file name and a new log file will be generated. Each time the log file is archived the .bak file will be overwritten. 
When using a network share that is not joined to a domain, use the net use command together with domain credentials to set access permissions before you set the log path for the DISM log.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>NoRestart</maml:name>
        <maml:description>
          <maml:para>Suppresses reboot. If a reboot is not required, this command does nothing. This option will keep the application from prompting for a restart or keep it from restarting automatically.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Online</maml:name>
        <maml:description>
          <maml:para>Specifies that the action is to be taken on the operating system that is currently running on the local computer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the full path to the root directory of the offline Windows image that you will service. If the directory named Windows is not a subdirectory of the root directory, -WindowsDirectory must be specified.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>ScratchDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies a temporary directory that will be used when extracting files for use during servicing. The directory must exist locally. If not specified, the \Windows\%Temp% directory will be used, with a subdirectory name of a randomly generated hexadecimal value for each run of DISM. Items in the scratch directory are deleted after each operation. 
You should not use a network share location as a scratch directory to expand a package (.cab or .msu file) for installation. The directory used for extracting files for temporary usage during servicing should be a local directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SystemDrive</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the location of the BootMgr files. This is necessary only when the BootMgr files are located on a partition other than the one that you are running the command from. Use -SystemDrive to service an installed Windows image from a Windows PE environment.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>UnattendPath</maml:name>
        <maml:description>
          <maml:para>Specifies the location of the unattend.xml answer file to apply to the image.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>WindowsDirectory</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the Windows directory relative to the image path. This cannot be the full path to the Windows directory; it should be a relative path. If not specified, the default is the Windows directory in the root of the offline image directory.</maml:para>
        </maml:description>
        <command:parameterValue required="false" variableLength="false">String</command:parameterValue>
        <dev:type>
          <maml:name>String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>none</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.Dism.Commands.ImageObject</maml:name>
          <maml:uri>
          </maml:uri>
          <maml:description>
            <maml:para />
          </maml:description>
        </dev:type>
        <maml:description>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <command:terminatingErrors />
    <command:nonTerminatingErrors />
    <command:examples>
      <command:example>
        <maml:title>Example 1: Apply an answer file to a mounted image</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Use-WindowsUnattend –Path "c:\offline" –UnattendPath "c:\test\answerfiles\myunattend.xml"
</dev:code>
        <dev:remarks>
          <maml:para>This command applies an answer file, myunattend.xml, to the Windows image that is mounted to c:\offline.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
      <command:example>
        <maml:title>Example 2: Apply an answer file to the running operating system</maml:title>
        <maml:introduction>
          <maml:para>
          </maml:para>
        </maml:introduction>
        <dev:code>PS C:\&gt;Use-WindowsUnattend –Online –UnattendPath "c:\test\answerfiles\myunattend.xml"
</dev:code>
        <dev:remarks>
          <maml:para>This command applies an answer file, myunattend.xml, to the online Windows image.</maml:para>
          <maml:para />
          <maml:para />
        </dev:remarks>
        <command:commandLines>
          <command:commandLine>
            <command:commandText />
          </command:commandLine>
        </command:commandLines>
      </command:example>
    </command:examples>
    <maml:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>http://go.microsoft.com/fwlink/p/?linkid=289368</maml:uri>
      </maml:navigationLink>
    </maml:relatedLinks>
  </command:command>
</helpItems>
