<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-Counter</command:name>
      <command:verb>Get</command:verb>
      <command:noun>Counter</command:noun>
      <maml:description>
        <maml:para>Gets performance counter data from local and remote computers.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>&gt; This cmdlet is only available on the Windows platform. The `Get-Counter` cmdlet gets performance counter data directly from the performance monitoring instrumentation in the Windows family of operating systems. `Get-Counter` gets performance data from a local computer or remote computers.</maml:para>
      <maml:para>You can use the `Get-Counter` parameters to specify one or more computers, list the performance counter sets and the instances they contain, set the sample intervals, and specify the maximum number of samples. Without parameters, `Get-Counter` gets performance counter data for a set of system counters.</maml:para>
      <maml:para>Many counter sets are protected by access control lists (ACL). To see all counter sets, open PowerShell with the Run as administrator option.</maml:para>
      <maml:para>This cmdlet was reintroduced in PowerShell 7.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; Performance counter names are localized. The examples shown here use the English names of the &gt; performance objects, counters, and instances. The names will be different on a system that uses &gt; another language. Use the `Get-Counter -ListSet` command to see the localized names.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-Counter</maml:name>
        <command:parameter required="false" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Counter</maml:name>
          <maml:description>
            <maml:para>Specifies the path to one or more counter paths. Paths are input as a comma-separated array, a variable, or values from a text file. You can send counter path strings down the pipeline to `Get-Counter`.</maml:para>
            <maml:para>Counter paths use the following syntax:</maml:para>
            <maml:para>`\ComputerName\CounterSet(Instance)\CounterName`</maml:para>
            <maml:para>`\CounterSet(Instance)\CounterName`</maml:para>
            <maml:para>For example:</maml:para>
            <maml:para>`\Server01\Processor(*)\% User Time`</maml:para>
            <maml:para>`\Processor(*)\% User Time`</maml:para>
            <maml:para>The `\ComputerName` is optional in a performance counter path. If the counter path doesn't include the computer name, `Get-Counter` uses the local computer.</maml:para>
            <maml:para>An asterisk (`*`) in the instance is a wildcard character to get all instances of the counter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies one computer name or a comma-separated array of remote computer names. Use the NetBIOS name, an IP address, or the computer's fully qualified domain name.</maml:para>
            <maml:para>To get performance counter data from the local computer, exclude the ComputerName parameter. For output such as a ListSet that contains the MachineName column, a dot (`.`) indicates the local computer.</maml:para>
            <maml:para>`Get-Counter` doesn't rely on PowerShell remoting. You can use the ComputerName parameter even if your computer isn't configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Continuous</maml:name>
          <maml:description>
            <maml:para>When the Continuous is specified, `Get-Counter` gets samples until you press &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Samples are obtained every second for each specified performance counter. Use the SampleInterval parameter to increase the interval between continuous samples.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxSamples</maml:name>
          <maml:description>
            <maml:para>Specifies the number of samples to get from each specified performance counter. To get a constant stream of samples, use the Continuous parameter.</maml:para>
            <maml:para>If the MaxSamples parameter isn't specified, `Get-Counter` only gets one sample for each specified counter.</maml:para>
            <maml:para>To collect a large data set, run `Get-Counter` as a PowerShell background job. For more information, see about_Jobs (../Microsoft.PowerShell.Core/About/about_Jobs.md).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>SampleInterval</maml:name>
          <maml:description>
            <maml:para>Specifies the number of seconds between samples for each specified performance counter. If the SampleInterval parameter isn't specified, `Get-Counter` uses a one-second interval.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-Counter</maml:name>
        <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByValue)" position="0" aliases="none">
          <maml:name>ListSet</maml:name>
          <maml:description>
            <maml:para>Lists the performance counter sets on the computers. Use an asterisk (`*`) to specify all counter sets. Enter one name or a comma-separated string of counter set names. You can send counter set names down the pipeline.</maml:para>
            <maml:para>To get a counter sets formatted counter paths, use the ListSet parameter. The Paths and PathsWithInstances properties of each counter set contain the individual counter paths formatted as a string.</maml:para>
            <maml:para>You can save the counter path strings in a variable or use the pipeline to send the string to another `Get-Counter` command.</maml:para>
            <maml:para>For example to send each Processor counter path to `Get-Counter`:</maml:para>
            <maml:para>`Get-Counter -ListSet Processor | Get-Counter`</maml:para>
            <maml:para>&gt; [!NOTE] &gt; In PowerShell 7, `Get-Counter` can't retrieve the Description property of the counter set. The &gt; Description is set to `$null`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies one computer name or a comma-separated array of remote computer names. Use the NetBIOS name, an IP address, or the computer's fully qualified domain name.</maml:para>
            <maml:para>To get performance counter data from the local computer, exclude the ComputerName parameter. For output such as a ListSet that contains the MachineName column, a dot (`.`) indicates the local computer.</maml:para>
            <maml:para>`Get-Counter` doesn't rely on PowerShell remoting. You can use the ComputerName parameter even if your computer isn't configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Specifies one computer name or a comma-separated array of remote computer names. Use the NetBIOS name, an IP address, or the computer's fully qualified domain name.</maml:para>
          <maml:para>To get performance counter data from the local computer, exclude the ComputerName parameter. For output such as a ListSet that contains the MachineName column, a dot (`.`) indicates the local computer.</maml:para>
          <maml:para>`Get-Counter` doesn't rely on PowerShell remoting. You can use the ComputerName parameter even if your computer isn't configured to run remote commands.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Continuous</maml:name>
        <maml:description>
          <maml:para>When the Continuous is specified, `Get-Counter` gets samples until you press &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. Samples are obtained every second for each specified performance counter. Use the SampleInterval parameter to increase the interval between continuous samples.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Counter</maml:name>
        <maml:description>
          <maml:para>Specifies the path to one or more counter paths. Paths are input as a comma-separated array, a variable, or values from a text file. You can send counter path strings down the pipeline to `Get-Counter`.</maml:para>
          <maml:para>Counter paths use the following syntax:</maml:para>
          <maml:para>`\ComputerName\CounterSet(Instance)\CounterName`</maml:para>
          <maml:para>`\CounterSet(Instance)\CounterName`</maml:para>
          <maml:para>For example:</maml:para>
          <maml:para>`\Server01\Processor(*)\% User Time`</maml:para>
          <maml:para>`\Processor(*)\% User Time`</maml:para>
          <maml:para>The `\ComputerName` is optional in a performance counter path. If the counter path doesn't include the computer name, `Get-Counter` uses the local computer.</maml:para>
          <maml:para>An asterisk (`*`) in the instance is a wildcard character to get all instances of the counter.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByValue)" position="0" aliases="none">
        <maml:name>ListSet</maml:name>
        <maml:description>
          <maml:para>Lists the performance counter sets on the computers. Use an asterisk (`*`) to specify all counter sets. Enter one name or a comma-separated string of counter set names. You can send counter set names down the pipeline.</maml:para>
          <maml:para>To get a counter sets formatted counter paths, use the ListSet parameter. The Paths and PathsWithInstances properties of each counter set contain the individual counter paths formatted as a string.</maml:para>
          <maml:para>You can save the counter path strings in a variable or use the pipeline to send the string to another `Get-Counter` command.</maml:para>
          <maml:para>For example to send each Processor counter path to `Get-Counter`:</maml:para>
          <maml:para>`Get-Counter -ListSet Processor | Get-Counter`</maml:para>
          <maml:para>&gt; [!NOTE] &gt; In PowerShell 7, `Get-Counter` can't retrieve the Description property of the counter set. The &gt; Description is set to `$null`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>MaxSamples</maml:name>
        <maml:description>
          <maml:para>Specifies the number of samples to get from each specified performance counter. To get a constant stream of samples, use the Continuous parameter.</maml:para>
          <maml:para>If the MaxSamples parameter isn't specified, `Get-Counter` only gets one sample for each specified counter.</maml:para>
          <maml:para>To collect a large data set, run `Get-Counter` as a PowerShell background job. For more information, see about_Jobs (../Microsoft.PowerShell.Core/About/about_Jobs.md).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
        <dev:type>
          <maml:name>System.Int64</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>SampleInterval</maml:name>
        <maml:description>
          <maml:para>Specifies the number of seconds between samples for each specified performance counter. If the SampleInterval parameter isn't specified, `Get-Counter` uses a one-second interval.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>`Get-Counter` accepts pipeline input for counter paths and counter set names.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.PowerShell.Commands.GetCounter.CounterSet, Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet, Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSample</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>To view an object's properties, send the output down the pipeline to `Get-Member`. The object types that are output are as follows: ListSet parameter: Microsoft.PowerShell.Commands.GetCounter.CounterSet Counter parameter: Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSampleSet CounterSamples property: Microsoft.PowerShell.Commands.GetCounter.PerformanceCounterSample</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>If no parameters are specified, `Get-Counter` gets one sample for each specified performance counter. Use the MaxSamples and Continuous parameters to get more samples.</maml:para>
        <maml:para>`Get-Counter` uses a one-second interval between samples. Use the SampleInterval parameter to increase the interval.</maml:para>
        <maml:para>The MaxSamples and SampleInterval values apply to all the counters on each computer in the command. To set different values for different counters, enter separate `Get-Counter` commands.</maml:para>
        <maml:para>In PowerShell 7, when using the ListSet parameter, `Get-Counter` can't retrieve the Description property of the counter set. The Description is set to `$null`.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------- Example 1: Get the counter set list -------------</maml:title>
        <dev:code>Get-Counter -ListSet *

CounterSetName     : Processor
MachineName        : .
CounterSetType     : MultiInstance
Description        : The Processor performance object consists of counters that measure aspects ...
                     computer that performs arithmetic and logical computations, initiates ...
                     computer can have multiple processors.  The processor object represents ...
Paths              : {\Processor(*)\% Processor Time, \Processor(*)\% User Time, ...
PathsWithInstances : {\Processor(0)\% Processor Time, \Processor(1)\% Processor Time, ...
Counter            : {\Processor(*)\% Processor Time, \Processor(*)\% User Time, ...</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the ListSet parameter with an asterisk (`*`) to get the list of counter sets. The dot (`.`) in the MachineName column represents the local computer.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----- Example 2: Specify the SampleInterval and MaxSamples -----</maml:title>
        <dev:code>Get-Counter -Counter "\Processor(_Total)\% Processor Time" -SampleInterval 2 -MaxSamples 3

Timestamp                 CounterSamples
---------                 --------------
6/18/2019 14:39:56        \\Computer01\processor(_total)\% processor time :
                          20.7144271584086

6/18/2019 14:39:58        \\Computer01\processor(_total)\% processor time :
                          10.4391790575511

6/18/2019 14:40:01        \\Computer01\processor(_total)\% processor time :
                          37.5968799396998</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the Counter parameter to specify the counter path `\Processor(_Total)\% Processor Time`. The SampleInterval parameter sets a two-second interval to check the counter. MaxSamples determines that three is the maximum number of times to check the counter.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Example 3: Get continuous samples of a counter --------</maml:title>
        <dev:code>Get-Counter -Counter "\Processor(_Total)\% Processor Time" -Continuous

Timestamp                 CounterSamples
---------                 --------------
6/19/2019 15:35:03        \\Computer01\processor(_total)\% processor time :
                          43.8522842937022

6/19/2019 15:35:04        \\Computer01\processor(_total)\% processor time :
                          29.7896844697383

6/19/2019 15:35:05        \\Computer01\processor(_total)\% processor time :
                          29.4962645638135

6/19/2019 15:35:06        \\Computer01\processor(_total)\% processor time :
                          25.5901500127408</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the Counter parameter to specify the `\Processor\% Processor Time` counter. The Continuous parameter specifies to get samples every second until the command is stopped with &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>--------- Example 4: Alphabetical list of counter sets ---------</maml:title>
        <dev:code>Get-Counter -ListSet * |
  Sort-Object -Property CounterSetName |
    Format-Table CounterSetName, CounterSetType -AutoSize

CounterSetName                        CounterSetType
--------------                        --------------
.NET CLR Data                         SingleInstance
.NET Data Provider for SqlServer      SingleInstance
AppV Client Streamed Data Percentage  SingleInstance
Authorization Manager Applications    SingleInstance
BitLocker                             MultiInstance
Bluetooth Device                      SingleInstance
Cache                                 SingleInstance
Client Side Caching                   SingleInstance</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the ListSet parameter with an asterisk (`*`) to get a complete list of counter sets. The CounterSet objects are sent down the pipeline. `Sort-Object` uses the Property parameter to specify that the objects are sorted by CounterSetName . The objects are sent down the pipeline to `Format-Table`. The AutoSize parameter adjusts the column widths to minimize truncation.</maml:para>
          <maml:para>The dot (`.`) in the MachineName column represents the local computer.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----- Example 5: Run a background job to get counter data -----</maml:title>
        <dev:code>Start-Job -ScriptBlock {Get-Counter -Counter "\LogicalDisk(_Total)\% Free Space" -MaxSamples 1000}

Id     Name  PSJobTypeName   State    HasMoreData  Location   Command
--     ----  -------------   -----    -----------  --------   -------
1      Job1  BackgroundJob   Running  True         localhost  Get-Counter -Counter</dev:code>
        <dev:remarks>
          <maml:para>`Start-Job` uses the ScriptBlock parameter to run a `Get-Counter` command. `Get-Counter` uses the Counter parameter to specify the counter path `\LogicalDisk(_Total)\% Free Space`. The MaxSamples parameter specifies to get 1000 samples of the counter.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----- Example 6: Get counter data from multiple computers -----</maml:title>
        <dev:code>$DiskReads = "\LogicalDisk(C:)\Disk Reads/sec"
$DiskReads | Get-Counter -ComputerName Server01, Server02 -MaxSamples 10

Timestamp                 CounterSamples
---------                 --------------
6/21/2019 10:51:04        \\Server01\logicaldisk(c:)\disk reads/sec :
                          0

                          \\Server02\logicaldisk(c:)\disk reads/sec :
                          0.983050344269146</dev:code>
        <dev:remarks>
          <maml:para>The `$DiskReads` variable stores the `\LogicalDisk(C:)\Disk Reads/sec` counter path. The `$DiskReads` variable is sent down the pipeline to `Get-Counter`. Counter is the first position parameter and accepts the path stored in `$DiskReads`. ComputerName specifies the two computers and MaxSamples specifies to get 10 samples from each computer.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 7: Get a counter's instance values from multiple random computers</maml:title>
        <dev:code>$Servers = Get-Random (Get-Content -Path C:\Servers.txt) -Count 50
$Counter = "\Processor(*)\% Processor Time"
Get-Counter -Counter $Counter -ComputerName $Servers

Timestamp                 CounterSamples
---------                 --------------
6/20/2019 12:20:35        \\Server01\processor(0)\% processor time :
                          6.52610319637854

                          \\Server01\processor(1)\% processor time :
                          3.41030663625782

                          \\Server01\processor(2)\% processor time :
                          9.64189975649925

                          \\Server01\processor(3)\% processor time :
                          1.85240835619747

                          \\Server01\processor(_total)\% processor time :
                          5.35768447160776</dev:code>
        <dev:remarks>
          <maml:para>The `Get-Random` cmdlet uses `Get-Content` to select 50 random computer names from the `Servers.txt` file. The remote computer names are stored in the `$Servers` variable. The `\Processor(*)\% Processor Time` counter's path is stored in the `$Counter` variable. `Get-Counter` uses the Counter parameter to specify the counters in the `$Counter` variable. The ComputerName parameter specifies the computer names in the `$Servers` variable.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>- Example 8: Use the Path property to get formatted path names -</maml:title>
        <dev:code>(Get-Counter -ListSet Memory).Paths | Where-Object { $_ -like "*Cache*" }

\Memory\Cache Faults/sec
\Memory\Cache Bytes
\Memory\Cache Bytes Peak
\Memory\System Cache Resident Bytes
\Memory\Standby Cache Reserve Bytes
\Memory\Standby Cache Normal Priority Bytes
\Memory\Standby Cache Core Bytes
\Memory\Long-Term Average Standby Cache Lifetime (s)</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the ListSet parameter to specify the Memory counter set. The command is enclosed in parentheses so that the Paths property returns each path as a string. The objects are sent down the pipeline to `Where-Object`. `Where-Object` uses the variable `$_` to process each object and uses the `-like` operator to find matches for the string ` Cache `. The asterisks (`*`) are wildcards for any characters.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 9: Use the PathsWithInstances property to get formatted path names</maml:title>
        <dev:code>(Get-Counter -ListSet PhysicalDisk).PathsWithInstances

\PhysicalDisk(0 C:)\Current Disk Queue Length
\PhysicalDisk(_Total)\Current Disk Queue Length
\PhysicalDisk(0 C:)\% Disk Time
\PhysicalDisk(_Total)\% Disk Time
\PhysicalDisk(0 C:)\Avg. Disk Queue Length
\PhysicalDisk(_Total)\Avg. Disk Queue Length
\PhysicalDisk(0 C:)\% Disk Read Time
\PhysicalDisk(_Total)\% Disk Read Time</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the ListSet parameter to specify the PhysicalDisk counter set. The command is enclosed in parentheses so that the PathsWithInstances property returns each path instance as a string.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 10: Get a single value for each counter in a counter set</maml:title>
        <dev:code>$MemCounters = (Get-Counter -ListSet Memory).Paths
Get-Counter -Counter $MemCounters

Timestamp                 CounterSamples
---------                 --------------
6/19/2019 12:05:00        \\Computer01\memory\page faults/sec :
                          868.772077545597

                          \\Computer01\memory\available bytes :
                          9031176192

                          \\Computer01\memory\committed bytes :
                          8242982912

                          \\Computer01\memory\commit limit :
                          19603333120</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the ListSet parameter to specify the Memory counter set. The command is enclosed in parentheses so that the Paths property returns each path as a string. The paths are stored in the `$MemCounters` variable. `Get-Counter` uses the Counter parameter to specify the counter paths in the `$MemCounters` variable.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------- Example 11: Display an object's property values -------</maml:title>
        <dev:code>$Counter = "\\Server01\Process(Idle)\% Processor Time"
$Data = Get-Counter $Counter
$Data.CounterSamples | Format-List -Property *

Path             : \\Server01\process(idle)\% processor time
InstanceName     : idle
CookedValue      : 198.467899571389
RawValue         : 14329160321003
SecondValue      : 128606459528326201
MultipleCount    : 1
CounterType      : Timer100Ns
Timestamp        : 6/19/2019 12:20:49
Timestamp100NSec : 128606207528320000
Status           : 0
DefaultScale     : 0
TimeBase         : 10000000</dev:code>
        <dev:remarks>
          <maml:para>The counter path is stored in the `$Counter` variable. `Get-Counter` gets one sample of the counter values and stores the results in the `$Data` variable. The `$Data` variable uses the CounterSamples property to get the object's properties. The object is sent down the pipeline to `Format-List`. The Property parameter uses an asterisk (`*`) wildcard to select all the properties.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>--------- Example 12: Performance counter array values ---------</maml:title>
        <dev:code>$Counter = Get-Counter -Counter "\Processor(*)\% Processor Time"
$Counter.CounterSamples[0]

Path                                         InstanceName        CookedValue
----                                         ------------        -----------
\\Computer01\processor(0)\% processor time   0              1.33997091699662</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the Counter parameter to specify the counter `\Processor(*)\% Processor Time`. The values are stored in the `$Counter` variable. `$Counter.CounterSamples[0]` displays the array value for the first counter value.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Example 13: Compare performance counter values --------</maml:title>
        <dev:code>$Counter = Get-Counter -Counter "\Processor(*)\% Processor Time"
$Counter.CounterSamples | Where-Object { $_.CookedValue -lt "20" }

Path                                         InstanceName        CookedValue
----                                         ------------        -----------
\\Computer01\processor(0)\% processor time   0              12.6398025240208
\\Computer01\processor(1)\% processor time   1              15.7598095767344</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the Counter parameter to specify the counter `\Processor(*)\% Processor Time`. The values are stored in the `$Counter` variable. The objects stored in `$Counter.CounterSamples` are sent down the pipeline. `Where-Object` uses a script block to compare each objects value against a specified value of `20`. The `$_.CookedValue` is a variable for the current object in the pipeline. Counters with a CookedValue that is less than 20 are displayed.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---------- Example 14: Sort performance counter data ----------</maml:title>
        <dev:code>$Procs = Get-Counter -Counter "\Process(*)\% Processor Time"
$Procs.CounterSamples | Sort-Object -Property CookedValue -Descending |
   Format-Table -Property Path, InstanceName, CookedValue -AutoSize

Path                                                         InstanceName             CookedValue
----                                                         ------------             -----------
\\Computer01\process(_total)\% processor time                _total              395.464129650573
\\Computer01\process(idle)\% processor time                  idle                389.356575524695
\\Computer01\process(mssense)\% processor time               mssense             3.05377706293879
\\Computer01\process(csrss#1)\% processor time               csrss               1.52688853146939
\\Computer01\process(microsoftedgecp#10)\% processor time    microsoftedgecp     1.52688853146939
\\Computer01\process(runtimebroker#5)\% processor time       runtimebroker                      0
\\Computer01\process(settingsynchost)\% processor time       settingsynchost                    0
\\Computer01\process(microsoftedgecp#16)\% processor time    microsoftedgecp                    0</dev:code>
        <dev:remarks>
          <maml:para>`Get-Counter` uses the Counter parameter to specify the `\Process(*)\% Processor Time` counter for all the processes on the local computer. The result is stored in the `$Procs` variable. The `$Procs` variable with the CounterSamples property sends the PerformanceCounterSample objects down the pipeline. `Sort-Object` uses the Property parameter to sort the objects by CookedValue in Descending order. `Format-Table` uses the Property parameter to select the columns for the output. The AutoSize parameter adjusts the column widths to minimize truncation.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/microsoft.powershell.diagnostics/get-counter?view=powershell-7.2&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Automatic_Variables</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Jobs</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Format-List</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Format-Table</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-Member</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Receive-Job</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Start-Job</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Where-Object</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinEvent</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinEvent</command:noun>
      <maml:description>
        <maml:para>Gets events from event logs and event tracing log files on local and remote computers.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>&gt; This cmdlet is only available on the Windows platform. The `Get-WinEvent` cmdlet gets events from event logs, including classic logs, such as the System and Application logs. The cmdlet gets data from event logs that are generated by the Windows Event Log technology introduced in Windows Vista and events in log files generated by Event Tracing for Windows (ETW) . By default, `Get-WinEvent` returns event information in the order of newest to oldest.</maml:para>
      <maml:para>`Get-WinEvent` lists event logs and event log providers. To interrupt the command, press &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;. You can get events from selected logs or from logs generated by selected event providers. And, you can combine events from multiple sources in a single command. `Get-WinEvent` allows you to filter events using XPath queries, structured XML queries, and hash table queries.</maml:para>
      <maml:para>If you're not running PowerShell as an Administrator, you might see error messages that you cannot retrieve information about a log.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="false" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>LogName</maml:name>
          <maml:description>
            <maml:para>Specifies the event logs that this cmdlet get events from. Enter the event log names in a comma-separated list. Wildcards are permitted. You can also pipe log names to the `Get-WinEvent` cmdlet.</maml:para>
            <maml:para>&gt; [!NOTE] &gt; PowerShell does not limit the amount of logs you can request. However, the `Get-WinEvent` cmdlet &gt; queries the Windows API which has a limit of 256. This can make it difficult to filter through all &gt; of your logs at one time. You can work around this by using a `foreach` loop to iterate through each &gt; log like this: `Get-WinEvent -ListLog * | ForEach-Object{ Get-WinEvent -LogName $_.Logname }`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>FilterXPath</maml:name>
          <maml:description>
            <maml:para>Specifies an XPath query that this cmdlet select events from one or more logs.</maml:para>
            <maml:para>For more information about the XPath language, see XPath Reference (/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100))and the Selection Filters section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Gets debug and analytic logs, in addition to other event logs. The Force parameter is required to get a debug or analytic log when the value of the name parameter includes wildcard characters.</maml:para>
            <maml:para>By default, the `Get-WinEvent` cmdlet excludes these logs unless you specify the full name of a debug or analytic log.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxEvents</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Oldest</maml:name>
          <maml:description>
            <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
            <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="False" position="0" aliases="none">
          <maml:name>ListLog</maml:name>
          <maml:description>
            <maml:para>Specifies the event logs. Enter the event log names in a comma-separated list. Wildcards are permitted. To get all the logs, use the asterisk (`*`) wildcard.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Gets debug and analytic logs, in addition to other event logs. The Force parameter is required to get a debug or analytic log when the value of the name parameter includes wildcard characters.</maml:para>
            <maml:para>By default, the `Get-WinEvent` cmdlet excludes these logs unless you specify the full name of a debug or analytic log.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="False" position="0" aliases="none">
          <maml:name>ListProvider</maml:name>
          <maml:description>
            <maml:para>Specifies the event log providers that this cmdlet gets. An event log provider is a program or service that writes events to the event log.</maml:para>
            <maml:para>Enter the provider names in a comma-separated list. Wildcards are permitted. To get the providers of all the event logs on the computer, use the asterisk (`*`) wildcard.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>ProviderName</maml:name>
          <maml:description>
            <maml:para>Specifies, as a string array, the event log providers from which this cmdlet gets events. Enter the provider names in a comma-separated list, or use wildcard characters to create provider name patterns.</maml:para>
            <maml:para>An event log provider is a program or service that writes events to the event log. It is not a PowerShell provider.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>FilterXPath</maml:name>
          <maml:description>
            <maml:para>Specifies an XPath query that this cmdlet select events from one or more logs.</maml:para>
            <maml:para>For more information about the XPath language, see XPath Reference (/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100))and the Selection Filters section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Gets debug and analytic logs, in addition to other event logs. The Force parameter is required to get a debug or analytic log when the value of the name parameter includes wildcard characters.</maml:para>
            <maml:para>By default, the `Get-WinEvent` cmdlet excludes these logs unless you specify the full name of a debug or analytic log.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxEvents</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Oldest</maml:name>
          <maml:description>
            <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
            <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>FilterHashtable</maml:name>
          <maml:description>
            <maml:para>Specifies a query in hash table format to select events from one or more event logs. The query contains a hash table with one or more key/value pairs.</maml:para>
            <maml:para>Hash table queries have the following rules:</maml:para>
            <maml:para>- Keys and values are case-insensitive.</maml:para>
            <maml:para>- Wildcard characters are valid only in the values associated with the LogName and ProviderName keys. - Each key can be listed only once in each hash table.</maml:para>
            <maml:para>- The Path value takes paths to `.etl`, `.evt`, and `.evtx` log files. - The LogName , Path , and ProviderName keys can be used in the same query. - The UserID key can take a valid security identifier (SID) or a domain account name that can be   used to construct a valid System.Security.Principal.NTAccount object . - The Data value takes event data in an unnamed field. For example, events in classic event   logs. - `&lt;named-data&gt;` key represents a named event data field.</maml:para>
            <maml:para>When `Get-WinEvent` cannot interpret a key/value pair, it interprets the key as a case-sensitive name for the event data in the event.</maml:para>
            <maml:para>The valid `Get-WinEvent` key/value pairs are as follows:</maml:para>
            <maml:para>- LogName =`&lt;String[]&gt;` - ProviderName =`&lt;String[]&gt;` - Path =`&lt;String[]&gt;` - Keywords =`&lt;Long[]&gt;` - ID =`&lt;Int32[]&gt;` - Level =`&lt;Int32[]&gt;` - StartTime =`&lt;DateTime&gt;` - EndTime =`&lt;DateTime&gt;` - UserID =`&lt;SID&gt;` - Data =`&lt;String[]&gt;` - `&lt;named-data&gt;`=`&lt;String[]&gt;` - SuppressHashFilter =`&lt;Hashtable&gt;`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable[]</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Hashtable[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Gets debug and analytic logs, in addition to other event logs. The Force parameter is required to get a debug or analytic log when the value of the name parameter includes wildcard characters.</maml:para>
            <maml:para>By default, the `Get-WinEvent` cmdlet excludes these logs unless you specify the full name of a debug or analytic log.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxEvents</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Oldest</maml:name>
          <maml:description>
            <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
            <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>FilterXml</maml:name>
          <maml:description>
            <maml:para>Specifies a structured XML query that this cmdlet selects events from one or more event logs.</maml:para>
            <maml:para>To generate a valid XML query, use the Create Custom View and Filter Current Log features in Windows Event Viewer. Use the items in the dialog box to create a query, and then click the XML tab to view the query in XML format. You can copy the XML from the XML tab into the value of the FilterXml parameter. For more information about the Event Viewer features, see Event Viewer Help.</maml:para>
            <maml:para>Use an XML query to create a complex query that contains several XPath statements. The XML format also allows you to use a Suppress XML element that excludes events from the query. For more information about the XML schema for event log queries, see Query Schema (/windows/win32/wes/queryschema-schema)and the XML Event Queries section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
            <maml:para>You may also create a Suppress element using the FilterHashtable parameter.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Xml.XmlDocument</command:parameterValue>
          <dev:type>
            <maml:name>System.Xml.XmlDocument</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
          <maml:name>ComputerName</maml:name>
          <maml:description>
            <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
            <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
            <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Local computer</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxEvents</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Oldest</maml:name>
          <maml:description>
            <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
            <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Get-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName)" position="0" aliases="PSPath">
          <maml:name>Path</maml:name>
          <maml:description>
            <maml:para>Specifies the path to the event log files that this cmdlet get events from. Enter the paths to the log files in a comma-separated list, or use wildcard characters to create file path patterns.</maml:para>
            <maml:para>`Get-WinEvent` supports files with the `.evt`, `.evtx`, and `.etl` file name extensions. You can include events from different files and file types in the same command.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Credential</maml:name>
          <maml:description>
            <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
            <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
          <dev:type>
            <maml:name>System.Management.Automation.PSCredential</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>Current user</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>FilterXPath</maml:name>
          <maml:description>
            <maml:para>Specifies an XPath query that this cmdlet select events from one or more logs.</maml:para>
            <maml:para>For more information about the XPath language, see XPath Reference (/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100))and the Selection Filters section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>MaxEvents</maml:name>
          <maml:description>
            <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
          <dev:type>
            <maml:name>System.Int64</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Oldest</maml:name>
          <maml:description>
            <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
            <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="Cn">
        <maml:name>ComputerName</maml:name>
        <maml:description>
          <maml:para>Specifies the name of the computer that this cmdlet gets events from the event logs. Type the NetBIOS name, an IP address, or the fully qualified domain name (FQDN) of the computer. The default value is the local computer, localhost . This parameter accepts only one computer name at a time.</maml:para>
          <maml:para>To get event logs from remote computers, configure the firewall port for the event log service to allow remote access.</maml:para>
          <maml:para>This cmdlet does not rely on PowerShell remoting. You can use the ComputerName parameter even if your computer is not configured to run remote commands.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Local computer</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Credential</maml:name>
        <maml:description>
          <maml:para>Specifies a user account that has permission to perform this action. The default value is the current user.</maml:para>
          <maml:para>Type a user name, such as User01 or Domain01\User01 . Or, enter a PSCredential object, such as one generated by the `Get-Credential` cmdlet. If you type a user name, you are prompted for a password. If you type only the parameter name, you are prompted for both a username and a password.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.PSCredential</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.PSCredential</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>Current user</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>FilterHashtable</maml:name>
        <maml:description>
          <maml:para>Specifies a query in hash table format to select events from one or more event logs. The query contains a hash table with one or more key/value pairs.</maml:para>
          <maml:para>Hash table queries have the following rules:</maml:para>
          <maml:para>- Keys and values are case-insensitive.</maml:para>
          <maml:para>- Wildcard characters are valid only in the values associated with the LogName and ProviderName keys. - Each key can be listed only once in each hash table.</maml:para>
          <maml:para>- The Path value takes paths to `.etl`, `.evt`, and `.evtx` log files. - The LogName , Path , and ProviderName keys can be used in the same query. - The UserID key can take a valid security identifier (SID) or a domain account name that can be   used to construct a valid System.Security.Principal.NTAccount object . - The Data value takes event data in an unnamed field. For example, events in classic event   logs. - `&lt;named-data&gt;` key represents a named event data field.</maml:para>
          <maml:para>When `Get-WinEvent` cannot interpret a key/value pair, it interprets the key as a case-sensitive name for the event data in the event.</maml:para>
          <maml:para>The valid `Get-WinEvent` key/value pairs are as follows:</maml:para>
          <maml:para>- LogName =`&lt;String[]&gt;` - ProviderName =`&lt;String[]&gt;` - Path =`&lt;String[]&gt;` - Keywords =`&lt;Long[]&gt;` - ID =`&lt;Int32[]&gt;` - Level =`&lt;Int32[]&gt;` - StartTime =`&lt;DateTime&gt;` - EndTime =`&lt;DateTime&gt;` - UserID =`&lt;SID&gt;` - Data =`&lt;String[]&gt;` - `&lt;named-data&gt;`=`&lt;String[]&gt;` - SuppressHashFilter =`&lt;Hashtable&gt;`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable[]</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>FilterXml</maml:name>
        <maml:description>
          <maml:para>Specifies a structured XML query that this cmdlet selects events from one or more event logs.</maml:para>
          <maml:para>To generate a valid XML query, use the Create Custom View and Filter Current Log features in Windows Event Viewer. Use the items in the dialog box to create a query, and then click the XML tab to view the query in XML format. You can copy the XML from the XML tab into the value of the FilterXml parameter. For more information about the Event Viewer features, see Event Viewer Help.</maml:para>
          <maml:para>Use an XML query to create a complex query that contains several XPath statements. The XML format also allows you to use a Suppress XML element that excludes events from the query. For more information about the XML schema for event log queries, see Query Schema (/windows/win32/wes/queryschema-schema)and the XML Event Queries section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
          <maml:para>You may also create a Suppress element using the FilterHashtable parameter.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Xml.XmlDocument</command:parameterValue>
        <dev:type>
          <maml:name>System.Xml.XmlDocument</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>FilterXPath</maml:name>
        <maml:description>
          <maml:para>Specifies an XPath query that this cmdlet select events from one or more logs.</maml:para>
          <maml:para>For more information about the XPath language, see XPath Reference (/previous-versions/dotnet/netframework-4.0/ms256115(v=vs.100))and the Selection Filters section of Event Selection (/previous-versions/aa385231(v=vs.85)).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Gets debug and analytic logs, in addition to other event logs. The Force parameter is required to get a debug or analytic log when the value of the name parameter includes wildcard characters.</maml:para>
          <maml:para>By default, the `Get-WinEvent` cmdlet excludes these logs unless you specify the full name of a debug or analytic log.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="False" position="0" aliases="none">
        <maml:name>ListLog</maml:name>
        <maml:description>
          <maml:para>Specifies the event logs. Enter the event log names in a comma-separated list. Wildcards are permitted. To get all the logs, use the asterisk (`*`) wildcard.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="False" position="0" aliases="none">
        <maml:name>ListProvider</maml:name>
        <maml:description>
          <maml:para>Specifies the event log providers that this cmdlet gets. An event log provider is a program or service that writes events to the event log.</maml:para>
          <maml:para>Enter the provider names in a comma-separated list. Wildcards are permitted. To get the providers of all the event logs on the computer, use the asterisk (`*`) wildcard.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>LogName</maml:name>
        <maml:description>
          <maml:para>Specifies the event logs that this cmdlet get events from. Enter the event log names in a comma-separated list. Wildcards are permitted. You can also pipe log names to the `Get-WinEvent` cmdlet.</maml:para>
          <maml:para>&gt; [!NOTE] &gt; PowerShell does not limit the amount of logs you can request. However, the `Get-WinEvent` cmdlet &gt; queries the Windows API which has a limit of 256. This can make it difficult to filter through all &gt; of your logs at one time. You can work around this by using a `foreach` loop to iterate through each &gt; log like this: `Get-WinEvent -ListLog * | ForEach-Object{ Get-WinEvent -LogName $_.Logname }`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>MaxEvents</maml:name>
        <maml:description>
          <maml:para>Specifies the maximum number of events that are returned. Enter an integer such as 100. The default is to return all the events in the logs or files.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int64</command:parameterValue>
        <dev:type>
          <maml:name>System.Int64</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Oldest</maml:name>
        <maml:description>
          <maml:para>Indicate that this cmdlet gets the events in oldest-first order. By default, events are returned in newest-first order.</maml:para>
          <maml:para>This parameter is required to get events from `.etl` and `.evt` files and from debug and analytic logs. In these files, events are recorded in oldest-first order, and the events can be returned only in oldest-first order.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName)" position="0" aliases="PSPath">
        <maml:name>Path</maml:name>
        <maml:description>
          <maml:para>Specifies the path to the event log files that this cmdlet get events from. Enter the paths to the log files in a comma-separated list, or use wildcard characters to create file path patterns.</maml:para>
          <maml:para>`Get-WinEvent` supports files with the `.evt`, `.evtx`, and `.etl` file name extensions. You can include events from different files and file types in the same command.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="true" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>ProviderName</maml:name>
        <maml:description>
          <maml:para>Specifies, as a string array, the event log providers from which this cmdlet gets events. Enter the provider names in a comma-separated list, or use wildcard characters to create provider name patterns.</maml:para>
          <maml:para>An event log provider is a program or service that writes events to the event log. It is not a PowerShell provider.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String, System.Xml.XmlDocument, System.Collections.Hashtable</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>You can pipeline a LogName (string), a FilterXML query, or a FilterHashtable query to `Get-WinEvent`.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Diagnostics.Eventing.Reader.EventLogConfiguration, System.Diagnostics.Eventing.Reader.EventLogRecord, System.Diagnostics.Eventing.Reader.ProviderMetadata</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>With the ListLog parameter, `Get-WinEvent` returns System.Diagnostics.Eventing.Reader.EventLogConfiguration objects.</maml:para>
          <maml:para>With the ListProvider parameter, `Get-WinEvent` returns System.Diagnostics.Eventing.Reader.ProviderMetadata objects.</maml:para>
          <maml:para>With all other parameters, `Get-WinEvent` returns System.Diagnostics.Eventing.Reader.EventLogRecord objects.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>`Get-WinEvent` is designed to replace the `Get-EventLog` cmdlet on computers running Windows Vista and later versions of Windows. `Get-EventLog` gets events only in classic event logs. `Get-EventLog` is retained for backward compatibility.</maml:para>
        <maml:para>The `Get-WinEvent` and `Get-EventLog` cmdlets are not supported in Windows Pre-installation Environment (Windows PE).</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------ Example 1: Get all the logs from a local computer ------</maml:title>
        <dev:code>Get-WinEvent -ListLog *

LogMode   MaximumSizeInBytes RecordCount LogName
-------   ------------------ ----------- -------
Circular            15532032       14500 Application
Circular             1052672         117 Azure Information Protection
Circular             1052672        3015 CxAudioSvcLog
Circular            20971520             ForwardedEvents
Circular            20971520           0 HardwareEvents</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListLog parameter uses the asterisk (`*`) wildcard to display information about each log.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 2: Get the classic Setup log -------------</maml:title>
        <dev:code>Get-WinEvent -ListLog Setup | Format-List -Property *

FileSize                       : 69632
IsLogFull                      : False
LastAccessTime                 : 3/13/2019 09:41:46
LastWriteTime                  : 3/13/2019 09:41:46
OldestRecordNumber             : 1
RecordCount                    : 23
LogName                        : Setup
LogType                        : Operational
LogIsolation                   : Application
IsEnabled                      : True
IsClassicLog                   : False
SecurityDescriptor             : O:BAG:SYD: ...
LogFilePath                    : %SystemRoot%\System32\Winevt\Logs\Setup.evtx
MaximumSizeInBytes             : 1052672
LogMode                        : Circular
OwningProviderName             : Microsoft-Windows-Eventlog
ProviderNames                  : {Microsoft-Windows-WUSA, Microsoft-Windows-ActionQueue...
ProviderLevel                  :
ProviderKeywords               :
ProviderBufferSize             : 64
ProviderMinimumNumberOfBuffers : 0
ProviderMaximumNumberOfBuffers : 64
ProviderLatency                : 1000
ProviderControlGuid            :</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet uses the ListLog parameter to specify the Setup log. The object is sent down the pipeline to the `Format-List` cmdlet. `Format-List` uses the Property parameter with the asterisk (`*`) wildcard to display each property.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Example 3: Configure the classic Security log --------</maml:title>
        <dev:code>$log = Get-WinEvent -ListLog Security
$log.MaximumSizeInBytes = 1gb
try{
   $log.SaveChanges()
   Get-WinEvent -ListLog Security | Format-List -Property *
}catch [System.UnauthorizedAccessException]{
   $ErrMsg  = 'You do not have permission to configure this log!'
   $ErrMsg += ' Try running this script with administrator privileges. '
   $ErrMsg += $_.Exception.Message
   Write-Error $ErrMsg
}

FileSize                       : 69632
IsLogFull                      : False
LastAccessTime                 : 3/13/2019 09:41:46
LastWriteTime                  : 3/13/2019 09:41:46
OldestRecordNumber             : 1
RecordCount                    : 23
LogName                        : Security
LogType                        : Administrative
LogIsolation                   : Custom
IsEnabled                      : True
IsClassicLog                   : True
SecurityDescriptor             : O:BAG:SYD: ...
LogFilePath                    : %SystemRoot%\System32\Winevt\Logs\Security.evtx
MaximumSizeInBytes             : 1073741824
LogMode                        : Circular
OwningProviderName             :
ProviderNames                  : {Microsoft-Windows-WUSA, Microsoft-Windows-ActionQueue...
ProviderLevel                  :
ProviderKeywords               :
ProviderBufferSize             : 64
ProviderMinimumNumberOfBuffers : 0
ProviderMaximumNumberOfBuffers : 64
ProviderLatency                : 1000
ProviderControlGuid            :</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet uses the ListLog parameter to specify the Security log. The object is saved to a variable. The MaximumSizeInBytes property is set to 1 gigabyte on the object. The SaveChanges method is called to push the change to the system inside of a try block to handle access violations. The `Get-WinEvent` cmdlet is called again on the Security log and piped to the `Format-List` cmdlet to verify that the MaximumSizeInBytes property has been saved on the machine.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------- Example 4: Get event logs from a server -----------</maml:title>
        <dev:code>Get-WinEvent -ListLog * -ComputerName localhost | Where-Object { $_.RecordCount }

LogMode   MaximumSizeInBytes RecordCount LogName
-------   ------------------ ----------- -------
Circular            15532032       14546 Application
Circular             1052672         117 Azure Information Protection
Circular             1052672        2990 CxAudioSvcLog
Circular             1052672           9 MSFTVPN Setup
Circular             1052672         282 OAlerts</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListLog parameter uses the asterisk (` `) wildcard to display information about each log. The ComputerName * parameter specifies to get the logs from the local computer, localhost . The objects are sent down the pipeline to the `Where-Object` cmdlet. `Where-Object` uses `$_.RecordCount` to return only logs that contain data. `$_` is a variable that represents the current object in the pipeline. RecordCount is a property of the object with a non-null value.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------- Example 5: Get event logs from multiple servers -------</maml:title>
        <dev:code>$S = 'Server01', 'Server02', 'Server03'
ForEach ($Server in $S) {
  Get-WinEvent -ListLog Application -ComputerName $Server |
    Select-Object LogMode, MaximumSizeInBytes, RecordCount, LogName,
      @{name='ComputerName'; expression={$Server}} |
    Format-Table -AutoSize
}

LogMode MaximumSizeInBytes RecordCount LogName     ComputerName
 ------- ------------------ ----------- -------     ------------
Circular           15532032       14577 Application Server01
Circular           15532032        9689 Application Server02
Circular           15532032        5309 Application Server03</dev:code>
        <dev:remarks>
          <maml:para>The variable `$S` stores the names three servers: Server01 , Server02 , and Server03 . The ForEach statement uses a loop to process each server, `($Server in $S)`. The script block in the curly braces (`{ }`) runs the `Get-WinEvent` command. The ListLog parameter specifies the Application log. The ComputerName parameter uses the variable `$Server` to get log information from each server.</maml:para>
          <maml:para>The objects are sent down the pipeline to the `Select-Object` cmdlet. `Select-Object` gets the properties LogMode , MaximumSizeInBytes , RecordCount , LogName , and uses a calculated expression to display the ComputerName using the `$Server` variable. The objects are sent down the pipeline to the `Format-Table` cmdlet to display the output in the PowerShell console. The AutoSize parameter formats the output to fit the screen.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------- Example 6: Get event log providers and log names -------</maml:title>
        <dev:code>Get-WinEvent -ListProvider *

Name     : .NET Runtime
LogLinks : {Application}
Opcodes  : {}
Tasks    : {}

Name     : .NET Runtime Optimization Service
LogLinks : {Application}
Opcodes  : {}
Tasks    : {}</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListProvider parameter uses the asterisk (`*`) wildcard to display information about each provider. In the output, the Name is the provider and LogLinks is the log that the provider writes to.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 7: Get all event log providers that write to a specific log</maml:title>
        <dev:code>(Get-WinEvent -ListLog Application).ProviderNames

.NET Runtime
.NET Runtime Optimization Service
Application
Application Error
Application Hang
Application Management</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListLog parameter uses Application to get objects for that log. ProviderNames is a property of the object and displays the providers that write to the Application log.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 8: Get event log provider names that contain a specific string</maml:title>
        <dev:code>Get-WinEvent -ListProvider *Policy*

Name     : Group Policy Applications
LogLinks : {Application}
Opcodes  : {}
Tasks    : {}

Name     : Group Policy Client
LogLinks : {Application}
Opcodes  : {}
Tasks    : {}

Name     : Group Policy Data Sources
LogLinks : {Application}
Opcodes  : {}
Tasks    : {}</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListProvider parameter uses the asterisk (` `) wildcard to find Policy * anywhere within the provider's name.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-- Example 9: Get Event Ids that the event provider generates --</maml:title>
        <dev:code>(Get-WinEvent -ListProvider Microsoft-Windows-GroupPolicy).Events | Format-Table Id, Description

Id  Description
  --  -----------
1500  The Group Policy settings for the computer were processed successfully...
1501  The Group Policy settings for the user were processed successfully...
4115  Group Policy Service started.
4116  Started the Group Policy service initialization phase.
4117  Group Policy Session started.</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The ListProvider parameter specifies the provider, Microsoft-Windows-GroupPolicy . The expression is wrapped in parentheses and uses the Events property to get objects. The objects are sent down the pipeline to the `Format-Table` cmdlet. `Format-Table` displays the Id and Description of the event objects.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>- Example 10: Get log information from event object properties -</maml:title>
        <dev:code>$Event = Get-WinEvent -LogName 'Windows PowerShell'
$Event.Count
$Event | Group-Object -Property Id -NoElement | Sort-Object -Property Count -Descending
$Event | Group-Object -Property LevelDisplayName -NoElement

195

Count  Name
-----  ----
  147  600
   22  400
   21  601
    3  403
    2  103

Count  Name
-----  ----
    2  Warning
  193  Information</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet uses the LogName parameter to specify the Windows PowerShell event log. The event objects are stored in the `$Event` variable. The Count property of `$Event`shows the total number of logged events.</maml:para>
          <maml:para>The `$Event` variable is sent down the pipeline to the `Group-Object` cmdlet. `Group-Object` uses the Property parameter to specify the Id property and counts the objects by the event Id value. The NoElement parameter removes other properties from the objects output. The grouped objects are sent down the pipeline to the `Sort-Object` cmdlet. `Sort-Object` uses the Property parameter to sort the objects by Count . The Descending parameter displays the output by count, from highest to lowest. In the output, the Count column contains the total number of each event. The Name column contains the grouped event Id numbers.</maml:para>
          <maml:para>The `$Event` variable is sent down the pipeline to the `Group-Object` cmdlet. `Group-Object` uses the Property parameter to specify the LevelDisplayName property and counts the objects by LevelDisplayName . The objects are grouped by the levels such as Warning and Information . The NoElement parameter removes other properties from the output. In the output, the Count column contains the total number of each event. The Name column contains the grouped LevelDisplayName .</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 11: Get error events that have a specified string in their name</maml:title>
        <dev:code>Get-WinEvent -LogName *PowerShell*, Microsoft-Windows-Kernel-WHEA* |
  Group-Object -Property LevelDisplayName, LogName -NoElement |
    Format-Table -AutoSize

Count  Name
-----  ----
    1  Error, PowerShellCore/Operational
   26  Information, Microsoft-Windows-Kernel-WHEA/Operational
  488  Information, Microsoft-Windows-PowerShell/Operational
   77  Information, PowerShellCore/Operational
 9835  Information, Windows PowerShell
   19  Verbose, PowerShellCore/Operational
  444  Warning, Microsoft-Windows-PowerShell/Operational
  512  Warning, PowerShellCore/Operational</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The LogName parameter uses a comma-separated string with the asterisk (`*`) wildcard to specify the log names. The objects are sent down the pipeline to the `Group-Object` cmdlet. `Group-Object` uses the Property parameter to group the objects by LevelDisplayName and LogName . The NoElement parameter removes other properties from the output. The grouped objects are sent down the pipeline to the `Format-Table` cmdlet. `Format-Table` uses the AutoSize parameter to format the columns. The Count column contains the total number of each event. The Name column contains the grouped LevelDisplayName and LogName .</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------ Example 12: Get events from an archived event log ------</maml:title>
        <dev:code>Get-WinEvent -Path 'C:\Test\Windows PowerShell.evtx'

ProviderName: PowerShell

TimeCreated              Id LevelDisplayName  Message
-----------              -- ----------------  -------
3/15/2019 13:54:13      403 Information       Engine state is changed from Available to Stopped...
3/15/2019 13:54:13      400 Information       Engine state is changed from None to Available...
3/15/2019 13:54:13      600 Information       Provider "Variable" is Started...
3/15/2019 13:54:13      600 Information       Provider "Function" is Started...
3/15/2019 13:54:13      600 Information       Provider "FileSystem" is Started...</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The Path parameter specifies the directory and file name.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 13: Get a specific number of events from an archived event log</maml:title>
        <dev:code>Get-WinEvent -Path 'C:\Test\PowerShellCore Operational.evtx' -MaxEvents 100

ProviderName: PowerShellCore

TimeCreated                 Id   LevelDisplayName  Message
-----------                 --   ----------------  -------
3/15/2019 09:54:54        4104   Warning           Creating Scriptblock text (1 of 1):...
3/15/2019 09:37:13       40962   Information       PowerShell console is ready for user input
3/15/2019 07:56:24        4104   Warning           Creating Scriptblock text (1 of 1):...
...
3/7/2019 10:53:22        40961   Information       PowerShell console is starting up
3/7/2019 10:53:22         8197   Verbose           Runspace state changed to Opening
3/7/2019 10:53:22         8195   Verbose           Opening RunspacePool</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the computer. The Path parameter specifies the directory and filename. The MaxEvents parameter specifies that 100 records are displayed, from newest to oldest.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------ Example 14: Event Tracing for Windows ------------</maml:title>
        <dev:code>Get-WinEvent -Path 'C:\Tracing\TraceLog.etl' -Oldest |
  Sort-Object -Property TimeCreated -Descending |
    Select-Object -First 100</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the archived file. The Path parameter specifies the directory and file name. The Oldest parameter is used to output events in the order they are written, oldest to newest. The objects are sent down the pipeline to the `Sort-Object` cmdlet `Sort-Object` sorts the objects in descending order by the value of the TimeCreated property. The objects are sent down the pipeline to the `Select-Object` cmdlet that displays the 100 newest events.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------- Example 15: Get events from an event trace log --------</maml:title>
        <dev:code>Get-WinEvent -Path 'C:\Tracing\TraceLog.etl', 'C:\Test\Windows PowerShell.evtx' -Oldest |
  Where-Object { $_.Id -eq '403' }</dev:code>
        <dev:remarks>
          <maml:para>The `Get-WinEvent` cmdlet gets log information from the archived files. The Path parameter uses a comma-separated list to specify each files directory and file name. The Oldest parameter is used to output events in the order they are written, oldest to newest. The objects are sent down the pipeline to the `Where-Object` cmdlet. `Where-Object` uses a script block to find events with an Id of 403 . The `$_` variable represents the current object in the pipeline and Id is the Event Id property.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 16: Filter event log results -------------</maml:title>
        <dev:code># Using the Where-Object cmdlet:
$Yesterday = (Get-Date) - (New-TimeSpan -Day 1)
Get-WinEvent -LogName 'Windows PowerShell' | Where-Object { $_.TimeCreated -ge $Yesterday }

# Using the FilterHashtable parameter:
$Yesterday = (Get-Date) - (New-TimeSpan -Day 1)
Get-WinEvent -FilterHashtable @{ LogName='Windows PowerShell'; Level=3; StartTime=$Yesterday }

# Using the FilterXML parameter:
$xmlQuery = @'
&lt;QueryList&gt;
  &lt;Query Id="0" Path="Windows PowerShell"&gt;
    &lt;Select Path="System"&gt;*[System[(Level=3) and
        TimeCreated[timediff(@SystemTime) &amp;lt;= 86400000]]]&lt;/Select&gt;
  &lt;/Query&gt;
&lt;/QueryList&gt;
'@
Get-WinEvent -FilterXML $xmlQuery

# Using the FilterXPath parameter:
$XPath = '*[System[Level=3 and TimeCreated[timediff(@SystemTime) &amp;lt;= 86400000]]]'
Get-WinEvent -LogName 'Windows PowerShell' -FilterXPath $XPath</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 17: Use FilterHashtable to get events from the Application log</maml:title>
        <dev:code>$Date = (Get-Date).AddDays(-2)
Get-WinEvent -FilterHashtable @{ LogName='Application'; StartTime=$Date; Id='1003' }</dev:code>
        <dev:remarks>
          <maml:para>The `Get-Date` cmdlet uses the AddDays method to get a date that is two days before the current date. The date object is stored in the `$Date` variable.</maml:para>
          <maml:para>The `Get-WinEvent` cmdlet gets log information. The FilterHashtable parameter is used to filter the output. The LogName key specifies the value as the Application log. The StartTime key uses the value stored in the `$Date` variable. The Id key uses an Event Id value, 1003 .</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-- Example 18: Use FilterHashtable to get application errors --</maml:title>
        <dev:code>$StartTime = (Get-Date).AddDays(-7)
Get-WinEvent -FilterHashtable @{
  Logname='Application'
  ProviderName='Application Error'
  Data='iexplore.exe'
  StartTime=$StartTime
}</dev:code>
        <dev:remarks>
          <maml:para>The `Get-Date` cmdlet uses the AddDays method to get a date that is seven days before the current date. The date object is stored in the `$StartTime` variable.</maml:para>
          <maml:para>The `Get-WinEvent` cmdlet gets log information. The FilterHashtable parameter is used to filter the output. The LogName key specifies the value as the Application log. The ProviderName key uses the value, Application Error , which is the event's Source . The Data key uses the value iexplore.exe The StartTime key uses the value stored in `$StartTime` variable.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 19: Use SuppressHashFilter to filter application errors</maml:title>
        <dev:code>$Date = (Get-Date).AddDays(-2)
$filter = @{
  LogName='Application'
  StartTime=$Date
  SuppressHashFilter=@{Level=4}
}
Get-WinEvent -FilterHashtable $filter</dev:code>
        <dev:remarks>
          <maml:para>In this example, `Get-WinEvent` gets all events from the Application log for the last two days except those that have a Level of 4 (Information).</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/microsoft.powershell.diagnostics/get-winevent?view=powershell-7.2&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Automatic_Variables</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Foreach</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>about_Hash_Tables</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Creating Get-WinEvent queries with FilterHashtable</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Format-Table</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Group-Object</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Sort-Object</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Where-Object</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>New-WinEvent</command:name>
      <command:verb>New</command:verb>
      <command:noun>WinEvent</command:noun>
      <maml:description>
        <maml:para>Creates a new Windows event for the specified event provider.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>&gt; This cmdlet is only available on the Windows platform. The `New-WinEvent` cmdlet creates an Event Tracing for Windows (ETW) event for an event provider. You can use this cmdlet to add events to ETW channels from PowerShell.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>New-WinEvent</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
          <maml:name>ProviderName</maml:name>
          <maml:description>
            <maml:para>Specifies the event provider that writes the event to an event log, such as "Microsoft-Windows-PowerShell". An ETW event provider is a logical entity that writes events to ETW sessions.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specifies an event Id that is registered in the event provider.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
          <dev:type>
            <maml:name>System.Int32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
          <maml:name>Payload</maml:name>
          <maml:description>
            <maml:para>The payload is an array of values passed as positional arguments to the event template. The values are inserted into the template to construct the message for the event. Events can have multiple template versions that use different formats.</maml:para>
            <maml:para>If the values in the payload do not match the types in the template, the event is logged but the payload contains an error.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Object[]</command:parameterValue>
          <dev:type>
            <maml:name>System.Object[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specifies the version number of the event. PowerShell converts the number to the required Byte type. The value specifies the version of the event when different versions of the same event are defined.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Byte</command:parameterValue>
          <dev:type>
            <maml:name>System.Byte</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="1" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specifies an event Id that is registered in the event provider.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Int32</command:parameterValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="2" aliases="none">
        <maml:name>Payload</maml:name>
        <maml:description>
          <maml:para>The payload is an array of values passed as positional arguments to the event template. The values are inserted into the template to construct the message for the event. Events can have multiple template versions that use different formats.</maml:para>
          <maml:para>If the values in the payload do not match the types in the template, the event is logged but the payload contains an error.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Object[]</command:parameterValue>
        <dev:type>
          <maml:name>System.Object[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="False" position="0" aliases="none">
        <maml:name>ProviderName</maml:name>
        <maml:description>
          <maml:para>Specifies the event provider that writes the event to an event log, such as "Microsoft-Windows-PowerShell". An ETW event provider is a logical entity that writes events to ETW sessions.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Specifies the version number of the event. PowerShell converts the number to the required Byte type. The value specifies the version of the event when different versions of the same event are defined.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Byte</command:parameterValue>
        <dev:type>
          <maml:name>System.Byte</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does not take input from the pipeline.</maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para>This cmdlet does to generate any output.</maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para>After the provider writes the event to an eventlog, you can use the `Get-WinEvent` cmdlet to get the event from the event log.</maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>---------------- Example 1 - Create a new event ----------------</maml:title>
        <dev:code>New-WinEvent -ProviderName Microsoft-Windows-PowerShell -Id 45090 -Payload @("Workflow", "Running")</dev:code>
        <dev:remarks>
          <maml:para>This command uses the `New-WinEvent` cmdlet to create event 45090 for the Microsoft-Windows-PowerShell provider.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---------- Example 2 - Get the template for an event ----------</maml:title>
        <dev:code>(Get-WinEvent -ListProvider Microsoft-Windows-GroupPolicy).Events | Where-Object Id -eq 8007

Id          : 8007
Version     : 0
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
Task        : System.Diagnostics.Eventing.Reader.EventTask
Keywords    : {}
Template    : &lt;template xmlns="http://schemas.microsoft.com/win/2004/08/events"&gt;
                &lt;data name="PolicyElaspedTimeInSeconds" inType="win:UInt32" outType="xs:unsignedInt"/&gt;
                &lt;data name="ErrorCode" inType="win:UInt32" outType="win:HexInt32"/&gt;
                &lt;data name="PrincipalSamName" inType="win:UnicodeString" outType="xs:string"/&gt;
                &lt;data name="IsMachine" inType="win:Boolean" outType="xs:boolean"/&gt;
                &lt;data name="IsConnectivityFailure" inType="win:Boolean" outType="xs:boolean"/&gt;
              &lt;/template&gt;

Description : Completed periodic policy processing for user %3 in %1 seconds.

Id          : 8007
Version     : 1
LogLink     : System.Diagnostics.Eventing.Reader.EventLogLink
Level       : System.Diagnostics.Eventing.Reader.EventLevel
Opcode      : System.Diagnostics.Eventing.Reader.EventOpcode
Task        : System.Diagnostics.Eventing.Reader.EventTask
Keywords    : {}
Template    : &lt;template xmlns="http://schemas.microsoft.com/win/2004/08/events"&gt;
                &lt;data name="PolicyElaspedTimeInSeconds" inType="win:UInt32" outType="xs:unsignedInt"/&gt;
                &lt;data name="ErrorCode" inType="win:UInt32" outType="win:HexInt32"/&gt;
                &lt;data name="PrincipalSamName" inType="win:UnicodeString" outType="xs:string"/&gt;
                &lt;data name="IsMachine" inType="win:UInt32" outType="xs:unsignedInt"/&gt;
                &lt;data name="IsConnectivityFailure" inType="win:Boolean" outType="xs:boolean"/&gt;
              &lt;/template&gt;

Description : Completed periodic policy processing for user %3 in %1 seconds.</dev:code>
        <dev:remarks>
          <maml:para>The Description property contains the message that gets written to the event log. The `%3` and `%1` value are placeholders for the values passed into the template. The `%3` string is replace with the value passed to the PrincipalSamName field. The `%1` string is replaced withe value passed to the PolicyElaspedTimeInSeconds field.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-- Example 3 - Create a new event using a versioned template --</maml:title>
        <dev:code>$Payload = @(300, [uint32]'0x8001011f', $env:USERNAME, 0, 1)
New-WinEvent -ProviderName Microsoft-Windows-GroupPolicy -Id 8007 -Version 1 -Payload $Payload
Get-winEvent -ProviderName Microsoft-Windows-GroupPolicy -MaxEvents 1

ProviderName: Microsoft-Windows-GroupPolicy

TimeCreated            Id LevelDisplayName Message
-----------            -- ---------------- -------
5/4/2022 8:40:24 AM  8007 Information      Completed periodic policy processing for user User1 in 300 seconds</dev:code>
        <dev:remarks>
          <maml:para>If the values in the payload do not match the types in the template, the event is logged but the payload contains an error.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Online Version:</maml:linkText>
        <maml:uri>https://docs.microsoft.com/powershell/module/microsoft.powershell.diagnostics/new-winevent?view=powershell-7.2&amp;WT.mc_id=ps-gethelp</maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Get-WinEvent</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>