

ABOUT_PROPERTIES


Short description

Describes how to use object properties in PowerShell.


Long description

PowerShell uses structured collections of information called objects to
represent the items in data stores or the state of the computer. Typically,
you work with object that are part of the Microsoft .NET Framework, but you
can also create custom objects in PowerShell.

The association between an item and its object is very close. When you
change an object, you usually change the item that it represents. For
example, when you get a file in PowerShell, you don't get the actual file.
Instead, you get a FILEINFO object that represents the file. When you
change the FileInfo object, the file changes too.

Most objects have properties. Properties are the data that are associated
with an object. Different types of object have different properties. For
example, a FILEINFO object, which represents a file, has an ISREADONLY
property that contains $True if the file has the read-only attribute and
$False if it doesn't. A DIRECTORYINFO object, which represents a file
system directory, has a PARENT property that contains the path to the
parent directory.

Object properties

To get the properties of an object, use the Get-Member cmdlet. For example,
to get the properties of a FILEINFO object, use the Get-ChildItem cmdlet to
get the FileInfo object that represents a file. Then, use a pipeline
operator (|) to send the FILEINFO object to Get-Member. The following
command gets the pwsh.exe file and sends it to Get-Member. The $PSHOME
automatic variable contains the path of the PowerShell installation
directory.

    Get-ChildItem $PSHOME\pwsh.exe | Get-Member

The output of the command lists the members of the FILEINFO object. Members
include both properties and methods. When you work in PowerShell, you have
access to all the members of the objects.

To get only the properties of an object and not the methods, use the
MEMBERTYPE parameter of the Get-Member cmdlet with a value of Property, as
shown in the following example.

    Get-ChildItem $PSHOME\pwsh.exe | Get-Member -MemberType Property

    TypeName: System.IO.FileInfo

    Name              MemberType Definition
    ----              ---------- ----------
    Attributes        Property   System.IO.FileAttributes Attributes {get;set;}
    CreationTime      Property   System.DateTime CreationTime {get;set;}
    CreationTimeUtc   Property   System.DateTime CreationTimeUtc {get;set;}
    Directory         Property   System.IO.DirectoryInfo Directory {get;}
    DirectoryName     Property   System.String DirectoryName {get;}
    Exists            Property   System.Boolean Exists {get;}
    Extension         Property   System.String Extension {get;}
    FullName          Property   System.String FullName {get;}
    IsReadOnly        Property   System.Boolean IsReadOnly {get;set;}
    LastAccessTime    Property   System.DateTime LastAccessTime {get;set;}
    LastAccessTimeUtc Property   System.DateTime LastAccessTimeUtc {get;set;}
    LastWriteTime     Property   System.DateTime LastWriteTime {get;set;}
    LastWriteTimeUtc  Property   System.DateTime LastWriteTimeUtc {get;set;}
    Length            Property   System.Int64 Length {get;}
    Name              Property   System.String Name {get;}

After you find the properties, you can use them in your PowerShell
commands.


Property values

Although every object of a specific type has the same properties, the
values of those properties describe the particular object. For example,
every FILEINFO object has a CREATIONTIME property, but the value of that
property differs for each file.

The most common way to get the values of the properties of an object is to
use the member access operator (.). Type a reference to the object, such as
a variable that contains the object, or a command that gets the object.
Then, type the operator (.) followed by the property name.

For example, the following command displays the value of the CREATIONTIME
property of the pwsh.exe file. The Get-ChildItem command returns a FILEINFO
object that represents the pwsh.exe file. The command is enclosed in
parentheses to make sure that it's executed before any properties are
accessed.

    (Get-ChildItem $PSHOME\pwsh.exe).CreationTime

    Wednesday, June 15, 2022 5:26:00 PM

You can also save an object in a variable and then get its properties using
the member access (.) method, as shown in the following example:

    $a = Get-ChildItem $PSHOME\pwsh.exe
    $a.CreationTime

    Wednesday, June 15, 2022 5:26:00 PM

You can also use the Select-Object and Format-List cmdlets to display the
property values of an object. Select-Object and Format-List each have a
PROPERTY parameter. You can use the PROPERTY parameter to specify one or
more properties and their values. Or, you can use the wildcard character
(*) to represent all the properties.

For example, the following command displays the values of all the
properties of the pwsh.exe file.

    Get-ChildItem $PSHOME\pwsh.exe | Format-List -Property *

    PSPath              : Microsoft.PowerShell.Core\FileSystem::C:\Program Files\PowerShell\7\pwsh.exe
    PSParentPath        : Microsoft.PowerShell.Core\FileSystem::C:\Program Files\PowerShell\7
    PSChildName         : pwsh.exe
    PSDrive             : C
    PSProvider          : Microsoft.PowerShell.Core\FileSystem
    PSIsContainer       : False
    Mode                : -a---
    ModeWithoutHardLink : -a---
    VersionInfo         : File:             C:\Program Files\PowerShell\7\pwsh.exe
                          InternalName:     pwsh.dll
                          OriginalFilename: pwsh.dll
                          FileVersion:      7.2.5.500
                          FileDescription:  pwsh
                          Product:          PowerShell
                          ProductVersion:   7.2.5 SHA: 0aad398b0e918ce7d73dca929ca6395639085b21
                          Debug:            False
                          Patched:          False
                          PreRelease:       False
                          PrivateBuild:     False
                          SpecialBuild:     False
                          Language:         Language Neutral

    BaseName            : pwsh
    Target              :
    LinkType            :
    Length              : 287648
    DirectoryName       : C:\Program Files\PowerShell\7
    Directory           : C:\Program Files\PowerShell\7
    IsReadOnly          : False
    FullName            : C:\Program Files\PowerShell\7\pwsh.exe
    Extension           : .exe
    Name                : pwsh.exe
    Exists              : True
    CreationTime        : 6/15/2022 5:26:00 PM
    CreationTimeUtc     : 6/15/2022 10:26:00 PM
    LastAccessTime      : 7/18/2022 11:32:06 AM
    LastAccessTimeUtc   : 7/18/2022 4:32:06 PM
    LastWriteTime       : 6/15/2022 5:26:00 PM
    LastWriteTimeUtc    : 6/15/2022 10:26:00 PM
    LinkTarget          :
    Attributes          : Archive

Static properties

You can use the static properties of .NET classes in PowerShell. Static
properties are properties of class, unlike standard properties, which are
properties of an object.

To get the static properties of an class, use the STATIC parameter of the
Get-Member cmdlet. For example, the following command gets the static
properties of the System.DateTime class.

    Get-Date | Get-Member -MemberType Property -Static

    TypeName: System.DateTime

    Name     MemberType Definition
    ----     ---------- ----------
    MaxValue Property   static datetime MaxValue {get;}
    MinValue Property   static datetime MinValue {get;}
    Now      Property   datetime Now {get;}
    Today    Property   datetime Today {get;}
    UtcNow   Property   datetime UtcNow {get;}

To get the value of a static property, use the following syntax.

    [<ClassName>]::<Property>

For example, the following command gets the value of the UTCNOW static
property of the System.DateTime class.

    [System.DateTime]::UtcNow


Member-access enumeration

Starting in PowerShell 3.0, when you use the member-access operator (.) to
access a property that doesn't exist on a list collection, PowerShell
automatically enumerates the items in the collection and returns the value
of the property on each item. For more information, see
about_Member-Access_Enumeration.

Examples

This command returns the value of the DISPLAYNAME property of every service
that Get-Service returns.

    (Get-Service).DisplayName

    Application Experience
    Application Layer Gateway Service
    Windows All-User Install Agent
    Application Identity
    Application Information
    ...

All collections have a COUNT property that returns the number of objects in
the collection.

    (Get-Service).Count

    176

Starting in PowerShell 3.0, if you request the COUNT or LENGTH property of
zero objects or one object, PowerShell returns the correct value.

    (Get-Service Audiosrv).Count

    1

If a property exists on the individual objects and on the collection, only
the collection's property is returned.

    $collection = @(
        [pscustomobject]@{length = "foo"}
        [pscustomobject]@{length = "bar"}
    )
    # PowerShell returns the collection's Length.
    $collection.length

    2


See also

-   about_Objects
-   about_Member-Access_Enumeration
-   about_Methods
-   Format-List
-   Get-Member
-   Select-Object
